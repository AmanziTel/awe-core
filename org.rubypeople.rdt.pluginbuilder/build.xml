<!--  This script will not be uploaded to the server.
      PLEASE DO NOT MODIFY 
      If you modify this script it is likely that the build will not work on the server
-->
<project name="Build Facade" default="main">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${basedir}/build-files/automatedTests/ant-contrib.jar" />
	
	<target name="-extractEclipse">
		<if>
			<os family="windows" />
			<then>
				<unzip dest="${buildDirectory}" src="${test.eclipse.zip}" />
			</then>
			<else>
				<untar dest="${buildDirectory}" src="${test.eclipse.zip}" compression="gzip" />
			</else>
		</if>
	</target>
	
	<target name="-extractMylyn">
		<mkdir dir="${eclipseDir}/mylyn"></mkdir>
		<unzip dest="${eclipseDir}/mylyn" src="${mylyn.zip}" />
		<copy todir="${eclipseDir}/plugins">
			<fileset dir="${eclipseDir}/mylyn/e3.2/plugins">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy todir="${eclipseDir}/features">
			<fileset dir="${eclipseDir}/mylyn/e3.2/features">
				<include name="*.jar"/>
			</fileset>
		</copy>
	</target>
	
	<target name="-downloadEclipse" unless="eclipse.zip.exists" description="This task will download the necessary 3.2 release of eclipse to use for our build host if we don't already have a copy in the build-files directory">
		<!-- Copy the necessary libraries for ftp to the ant library dir? -->
		<condition property="ftp.libraries.exist">
			<available file="${ant.library.dir}/commons-net-1.4.1.jar" type="file"/>
		</condition>		
		<copy file="${buildHome}/build-files/ftp/commons-net-1.4.1.jar" todir="${ant.library.dir}" overwrite="no"></copy>
		<copy file="${buildHome}/build-files/ftp/jakarta-oro-2.0.8.jar" todir="${ant.library.dir}" overwrite="no"></copy>
		<fail message="Didn't have necessary libraries in your ant lib folder to run ftp. They have been copied over now, please retry your ant task." unless="ftp.libraries.exist"></fail>
				
		<ftp action="get" 
			server="ftp.osuosl.org"
			userid="anonymous"
			password="build@aptana.com">
			<fileset dir="${buildHome}/build-files">
				<include name="pub/eclipse/eclipse/downloads/drops/R-3.2.2-200702121330/${eclipse.partial.name}"/>
			</fileset>
		</ftp>
		<move file="${buildHome}/build-files/pub/eclipse/eclipse/downloads/drops/R-3.2.2-200702121330/${eclipse.partial.name}" 
			todir="${buildHome}/build-files">
		</move>
		<delete dir="${buildHome}/build-files/pub"></delete>
	</target>
	
	<target name="-properties">				
		<!-- versioning -->
		<property name="build.version" value="HEAD"/>
		<property file="releases/${build.version}.properties" />
		<tstamp>
		      <format property="version.qualifier" pattern="yyyyMMddHHmm" timezone="GMT" unit="minute"/>
		</tstamp>
		<property name="buildHome" value="${basedir}"></property>
	
		<property name="buildTypePresentation" value=""/>
		<property name="version.full" value="${version}.${version.qualifier}${buildTypePresentation}"/>
				
		<!-- includes -->
		<property file="build_local.properties" />
		<property file="pluginbuilder.config" />
		
		<if>
			<os family="windows" />
			<then>
				<property name="eclipse.partial.name" value="eclipse-SDK-3.2.2-win32.zip"></property>
			</then>
			<!-- TODO We need to include the right archive for whatever platforms we plan to try and build on -->
			<else>
				<property name="eclipse.partial.name" value="eclipse-SDK-3.2.2-${os}-${ws}.tar.gz"></property>
			</else> 
		</if>		
		<property name="test.eclipse.zip" value="${buildHome}/build-files/${eclipse.partial.name}"></property>
		<!-- if file doesn't exist, grab it via ftp! -->
		<condition property="eclipse.zip.exists">
			<available file="${test.eclipse.zip}" type="file"/>
		</condition>
		<antcall target="-downloadEclipse"></antcall>

		<property name="eclipseDir" value="${buildDirectory}/eclipse"></property>
		<property name="mylyn.zip" value="${buildHome}/build-files/mylyn-2.0.0-e3.2.zip"></property>
				
		<!-- set defaults -->
		<property name="buildTarget" value="main"/>
		<property name="verboseAnt" value="-Ddummy=true"/>
		
		<!-- check if clean should be called -->
		<condition property="is.clean">
			<or>
				<equals arg1="main" arg2="${buildTarget}" trim="true"/>
		   		<equals arg1="fetch" arg2="${buildTarget}" trim="true"/>
			</or>
		</condition>
	</target>

	<target name="-setupEclipseBuildHost">
		<!-- extract test eclipse zip into a temporary location so we can use that as build host -->
		<antcall target="-extractEclipse"></antcall>		
		
		<available type="dir" file="${eclipseDir}/plugins" property="eclipseDir.plugins.exists"/>
		<fail message="Could not find directory ${eclipseDir}/plugins. Please check eclipseDir in build_local.properties" unless="eclipseDir.plugins.exists"/>
		
		<!-- determine buildfile -->
		<fileset dir="${eclipseDir}/plugins" includes="org.eclipse.pde.build_*/scripts/build.xml" id="pde.plugin.path" />
		<pathconvert property="buildfile" refid="pde.plugin.path" />
		<fail message="Could not find org.eclipse.pde.build_*/scripts/build.xml in ${eclipseDir}/plugins. PDE not installed?" unless="buildfile"/>
	 
		<antcall target="-extractMylyn"></antcall>
	</target>
	
	<target name="-clean" if="is.clean">
		<echo level="info" message="Cleaning directory ${buildDirectory}"/>
		<delete dir="${buildDirectory}" verbose="false"/>
		<mkdir dir="${buildDirectory}"/>
	</target>
	
	<target name="-build" depends="-properties,-clean,-setupEclipseBuildHost">
		<property name="buildResultsDirectory" value="${buildDirectory}/results" />
		<java classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
			<arg value="-ws" />
			<arg value="${ws}" />
			<arg value="-os" />
			<arg value="${os}" />
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${buildfile}" />
			<arg value="${buildTarget}" />
			<arg value="-data" />
			<arg value="${buildDirectory}/workspace" />
			<arg value="${verboseAnt}"/>
			<jvmarg value="-Dbasews=${ws}" />
			<jvmarg value="-Dbaseos=${os}" />
			<jvmarg value="-Dbasearch=${arch}" />
			<jvmarg value="-Dbuilder=${buildHome}/build-files" />
			<jvmarg value="-DjavacFailOnError=true"/>
			<jvmarg value="-DbuildDirectory=${buildDirectory}"/>
			<jvmarg value="-DbuildResultsDirectory=${buildResultsDirectory}"/>
			<jvmarg value="-DbaseLocation=${eclipseDir}"/>
			<jvmarg value="-DbuildHome=${buildHome}"/>
			<jvmarg value="-Dversion.full=${version.full}"/>
			<jvmarg value="-Dversion.qualifier=${version.qualifier}"/>
			<jvmarg value="-DbuildType=${buildType}"/>
			<jvmarg value="-DfetchTag=${fetchTag}"/>
		 <jvmarg value="-Dtest.eclipse.zip=${test.eclipse.zip}"/>

			<classpath>
				<pathelement location="${eclipseDir}/startup.jar" />
			</classpath>
		</java>
	</target>
	
	<target name="main-cc"
			description="This target is suited to be run from cruisecontrol. The property 'label' is expected to be set from cruisecontrol.">
		<property name="version.full" value="${label}"/> 
		<!-- TODO: extract qualifier correctly from label -->
		<property name="version.qualifier" value="${label}"/>		
		<antcall target="-build"/>
	</target>
	
	<target name="main" description="Run the main target of customTargets.xml.">
		<property name="buildTarget" value="main"/>
		<antcall target="-build"/>
	</target>

	<target name="fetch" description="Run the fetch target of customTargets.xml.">
		<property name="buildTarget" value="fetch"/>
		<antcall target="-build"/>
	</target>	
	
	<target name="generate" description="Run the generate target of customTargets.xml.">
		<property name="buildTarget" value="generate"/>
		<antcall target="-build"/>
	</target>
	
	<target name="process" description="Run the process target of customTargets.xml.">
		<property name="buildTarget" value="process"/>
		<antcall target="-build"/>
	</target>
			
	<target name="assemble" description="Run the assemble target of customTargets.xml.">
		<property name="buildTarget" value="assemble"/>
		<antcall target="-build"/>
	</target>
	
	<target name="postBuild" description="Run the postBuild target of customTargets.xml.">
		<property name="buildTarget" value="postBuild"/>
		<antcall target="-build"/>
	</target>
	
	<target name="-releaseproperties">
		<property name="buildDirectory" value="/home/rdt/release-${build.version}"/>
		<property name="buildResultsDirectory" value="${buildDirectory}/results"/>
	</target>
	
	<target name="release" if="build.version" depends="-releaseproperties">
		<antcall target="main"/>
	</target>
		
	<target name="-updateSiteXml">
		<property name="siteXmlFile" value="site.xml"/>
		<property name="placeHolder" value="&lt;!--AddNewFeatureElementHere--&gt;"/>
		<property name="featureUrl" value="features/org.rubypeople.rdt_${version.full}.jar"/>
		<!-- replacevalue nested element does not support variable replacement. Therefore a two step approach:
			1. add a feature element
			2. add newline -->
		<echo message="Adding feature version ${version.full} to ${siteXmlFile}"/>
		<replace file="${siteXmlFile}" token="${placeHolder}" value="&lt;feature url=&quot;${featureUrl}&quot; id=&quot;org.rubypeople.rdt&quot; version=&quot;${version.full}&quot;&gt; &lt;category name=&quot;RubyEclipseIntegrationBuilds&quot;/&gt; &lt;/feature&gt; ${placeHolder}"/>
		<replace file="${siteXmlFile}" token="${placeHolder}">
			<replacevalue>
	&lt;!--AddNewFeatureElementHere--&gt;</replacevalue>
		</replace>
	</target>

	<target name="deploy" if="build.version" depends="-releaseproperties,-properties">
		<!-- This target is used for manually deploying integration and release builds
		Nightly builds are deployed using cruise controls config.xml file -->
		<property name="downloadUser" value="rubypeople"/>
		<property name="downloadHost" value="download.rubypeople.org"/>
		<property name="buildTypeDirectory" value="integration"/>
		<property name="downloadDirectory" value="~/subdomains/download/httpdocs/${buildTypeDirectory}/${version.full}"/>
		<property name="updateSiteDirectory" value="~/subdomains/updatesite/httpdocs/${buildTypeDirectory}"/>
		<property name="buildResultsDirectory" value="${buildDirectory}/results"/>
		<echo message="Copying ${buildResultsDirectory} to ${downloadUser}@${downloadHost}:${downloadDirectory}"/>
		<sshexec host="${downloadHost}"
			username="${downloadUser}"
			keyfile="${user.home}/.ssh/id_rdt_download"
			command="mkdir --parents ${downloadDirectory}"/>
		<scp todir="${downloadUser}:usekeyinsteadofpw@${downloadHost}:${downloadDirectory}"
			keyfile="${user.home}/.ssh/id_rdt_download"
			passphrase="">
			<fileset dir="${buildResultsDirectory}"/>
		</scp>
		<echo message="Copying files to updatesite: ${downloadUser}@${downloadHost}:${downloadDirectory}"/>
		<property name="updateSiteScpUrl" value="${downloadUser}@${downloadHost}:${updateSiteDirectory}"/>
		<scp todir="${updateSiteScpUrl}"
			keyfile="${user.home}/.ssh/id_rdt_download"
			passphrase="">
			<fileset dir="${buildResultsDirectory}/updateSite">
				<exclude name="site.xml"/>
			</fileset>
		</scp>
		<echo message="Updating site.xml"/>
		<property name="siteXmlFile" value="/tmp/site.xml"/>
		<scp file="${updateSiteScpUrl}/site.xml" 
			localTofile="${siteXmlFile}"
			keyfile="${user.home}/.ssh/id_rdt_download"
			passphrase=""/>
		<antcall target="-updateSiteXml"/>
		<scp file="${siteXmlFile}" 
			todir="${updateSiteScpUrl}"
			keyfile="${user.home}/.ssh/id_rdt_download"
			passphrase=""/>
	</target>

	<target name="deploy-sourceforge" if="build.version" depends="-releaseproperties,-properties">
		<ftp server="upload.sf.net" remotedir="incoming" userid="anonymous" password="mbarchfe@users.sf.net">
			<fileset dir="${buildResultsDirectory}">
				<include name="org.rubypeople.rdt-${version.full}.zip"/>
			</fileset>
		</ftp>
	</target>

</project>
