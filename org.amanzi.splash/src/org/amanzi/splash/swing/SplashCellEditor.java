package org.amanzi.splash.swing;import java.awt.Component;import java.awt.event.ActionEvent;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import javax.swing.DefaultCellEditor;import javax.swing.JTable;import javax.swing.JTextField;import org.amanzi.splash.ui.FormulaEditor;public class SplashCellEditor extends DefaultCellEditor {	/**	 * 	 */	private static final long serialVersionUID = -2031687089150606947L;	private JTable table;	private Object cellValue;		/*	 * Row of Cell to Edit	 */	private int cellRow;		/*	 * Column of Cell to Edit 	 */	private int cellColumn;		private FormulaEditor formulaEditor;	public SplashCellEditor(FormulaEditor formulaEditor) {		super(new JTextField()); // No defaut super constructor				final JTextField textField = (JTextField)editorComponent;				this.formulaEditor = formulaEditor;				// Reassign an other delegate that checks stopCellEditing ()		// before firing stop event		delegate = new EditorDelegate() {			/**			 * 			 */			private static final long serialVersionUID = -4282468453693627605L;			public void setValue(Object value) {				textField.setText((value != null) ? value.toString() : "");			}			public Object getCellEditorValue() {				return textField.getText();			}			public void actionPerformed(ActionEvent event) {				if (SplashCellEditor.this.stopCellEditing())					super.actionPerformed(event);			}		};		textField.addActionListener(delegate);		// this.parser = parser;	}	/**	 * Returns the table model value edited by this editor.	 */	public Object getCellEditorValue() {		return cellValue;	}	/**	 * Quick utility for Obtaining casted model value	 * 	 * @return	 */	private SplashTableModel getModel() {		return (SplashTableModel) table.getModel();	}	/**	 * Handle stop cell editing event when user presses ENTER after editing a	 * cell	 */	public boolean stopCellEditing() {		String newFormula = (String) super.getCellEditorValue();				cellValue = getModel().interpret(newFormula, cellRow, cellColumn);				//Lagutko, 5.10.2009, if there was a formatting error than we can't stop editing		boolean isError = !((Cell)cellValue).isFormatError();				formulaEditor.stopCellEditing(false);				return isError && super.stopCellEditing();	}		/**	 * fired when user starts editing a cell	 * 	 */	public Component getTableCellEditorComponent(JTable table, Object value,			boolean isSelected, int row, int column) {		cellValue = value;				//Lagutko, 29.09.2009, set a row and column of edited Cell		cellRow = row;		cellColumn = column;				value = (String) ((Cell) value).getDefinition();		this.table = table;		final JTextField c = (JTextField) super.getTableCellEditorComponent(				table, value, // edit the text field of Cell				isSelected, row, column);				formulaEditor.setCellEditorComponent(c);		formulaEditor.setCellEditor(this);		c.addKeyListener(new KeyListener(){                        @Override            public void keyTyped(KeyEvent e) {                            }                        @Override            public void keyReleased(KeyEvent e) {                formulaEditor.setText(c.getText());            }                        @Override            public void keyPressed(KeyEvent e) {            }        });				c.selectAll(); // automatically select the whole string in the cell		return c;	}}