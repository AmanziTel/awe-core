
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1BitString;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;
import org.bn.types.BitString;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "MeasurementReport", isSet = false )
    public class MeasurementReport implements IASN1PreparedElement {
            
        @ASN1Element ( name = "measurementIdentity", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementIdentity measurementIdentity = null;
                
  
        @ASN1Element ( name = "measuredResults", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasuredResults measuredResults = null;
                
  
        @ASN1Element ( name = "measuredResultsOnRACH", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasuredResultsOnRACH measuredResultsOnRACH = null;
                
  
        @ASN1Element ( name = "additionalMeasuredResults", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasuredResultsList additionalMeasuredResults = null;
                
  
        @ASN1Element ( name = "eventResults", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private EventResults eventResults = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "v390nonCriticalExtensions" , isSet = false )
       public static class V390nonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "measurementReport-v390ext", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementReport_v390ext measurementReport_v390ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "laterNonCriticalExtensions" , isSet = false )
       public static class LaterNonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                @ASN1BitString( name = "" )
    
        @ASN1Element ( name = "measurementReport-r3-add-ext", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private BitString measurementReport_r3_add_ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "v4b0NonCriticalExtensions" , isSet = false )
       public static class V4b0NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "measurementReport-v4b0ext", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementReport_v4b0ext_IEs measurementReport_v4b0ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "v590NonCriticalExtensions" , isSet = false )
       public static class V590NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "measurementReport-v590ext", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementReport_v590ext_IEs measurementReport_v590ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "v5b0NonCriticalExtensions" , isSet = false )
       public static class V5b0NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "measurementReport-v5b0ext", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementReport_v5b0ext_IEs measurementReport_v5b0ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "v690NonCriticalExtensions" , isSet = false )
       public static class V690NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "measurementReport-v690ext", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementReport_v690ext_IEs measurementReport_v690ext = null;
                
  

       @ASN1Element ( name = "nonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementReportNonCriticalExtensionsSequenceType nonCriticalExtensions = null;
                
  
        
        public MeasurementReport_v690ext_IEs getMeasurementReport_v690ext () {
            return this.measurementReport_v690ext;
        }

        

        public void setMeasurementReport_v690ext (MeasurementReport_v690ext_IEs value) {
            this.measurementReport_v690ext = value;
        }
        
  
        
        public MeasurementReportNonCriticalExtensionsSequenceType getNonCriticalExtensions () {
            return this.nonCriticalExtensions;
        }

        
        public boolean isNonCriticalExtensionsPresent () {
            return this.nonCriticalExtensions != null;
        }
        

        public void setNonCriticalExtensions (MeasurementReportNonCriticalExtensionsSequenceType value) {
            this.nonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_V690NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_V690NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(V690NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "v690NonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private V690NonCriticalExtensionsSequenceType v690NonCriticalExtensions = null;
                
  
        
        public MeasurementReport_v5b0ext_IEs getMeasurementReport_v5b0ext () {
            return this.measurementReport_v5b0ext;
        }

        

        public void setMeasurementReport_v5b0ext (MeasurementReport_v5b0ext_IEs value) {
            this.measurementReport_v5b0ext = value;
        }
        
  
        
        public V690NonCriticalExtensionsSequenceType getV690NonCriticalExtensions () {
            return this.v690NonCriticalExtensions;
        }

        
        public boolean isV690NonCriticalExtensionsPresent () {
            return this.v690NonCriticalExtensions != null;
        }
        

        public void setV690NonCriticalExtensions (V690NonCriticalExtensionsSequenceType value) {
            this.v690NonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_V5b0NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_V5b0NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(V5b0NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "v5b0NonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private V5b0NonCriticalExtensionsSequenceType v5b0NonCriticalExtensions = null;
                
  
        
        public MeasurementReport_v590ext_IEs getMeasurementReport_v590ext () {
            return this.measurementReport_v590ext;
        }

        

        public void setMeasurementReport_v590ext (MeasurementReport_v590ext_IEs value) {
            this.measurementReport_v590ext = value;
        }
        
  
        
        public V5b0NonCriticalExtensionsSequenceType getV5b0NonCriticalExtensions () {
            return this.v5b0NonCriticalExtensions;
        }

        
        public boolean isV5b0NonCriticalExtensionsPresent () {
            return this.v5b0NonCriticalExtensions != null;
        }
        

        public void setV5b0NonCriticalExtensions (V5b0NonCriticalExtensionsSequenceType value) {
            this.v5b0NonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_V590NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_V590NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(V590NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "v590NonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private V590NonCriticalExtensionsSequenceType v590NonCriticalExtensions = null;
                
  
        
        public MeasurementReport_v4b0ext_IEs getMeasurementReport_v4b0ext () {
            return this.measurementReport_v4b0ext;
        }

        

        public void setMeasurementReport_v4b0ext (MeasurementReport_v4b0ext_IEs value) {
            this.measurementReport_v4b0ext = value;
        }
        
  
        
        public V590NonCriticalExtensionsSequenceType getV590NonCriticalExtensions () {
            return this.v590NonCriticalExtensions;
        }

        
        public boolean isV590NonCriticalExtensionsPresent () {
            return this.v590NonCriticalExtensions != null;
        }
        

        public void setV590NonCriticalExtensions (V590NonCriticalExtensionsSequenceType value) {
            this.v590NonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_V4b0NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_V4b0NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(V4b0NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "v4b0NonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private V4b0NonCriticalExtensionsSequenceType v4b0NonCriticalExtensions = null;
                
  
        
        public BitString getMeasurementReport_r3_add_ext () {
            return this.measurementReport_r3_add_ext;
        }

        
        public boolean isMeasurementReport_r3_add_extPresent () {
            return this.measurementReport_r3_add_ext != null;
        }
        

        public void setMeasurementReport_r3_add_ext (BitString value) {
            this.measurementReport_r3_add_ext = value;
        }
        
  
        
        public V4b0NonCriticalExtensionsSequenceType getV4b0NonCriticalExtensions () {
            return this.v4b0NonCriticalExtensions;
        }

        
        public boolean isV4b0NonCriticalExtensionsPresent () {
            return this.v4b0NonCriticalExtensions != null;
        }
        

        public void setV4b0NonCriticalExtensions (V4b0NonCriticalExtensionsSequenceType value) {
            this.v4b0NonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_LaterNonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_LaterNonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(LaterNonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "laterNonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private LaterNonCriticalExtensionsSequenceType laterNonCriticalExtensions = null;
                
  
        
        public MeasurementReport_v390ext getMeasurementReport_v390ext () {
            return this.measurementReport_v390ext;
        }

        

        public void setMeasurementReport_v390ext (MeasurementReport_v390ext value) {
            this.measurementReport_v390ext = value;
        }
        
  
        
        public LaterNonCriticalExtensionsSequenceType getLaterNonCriticalExtensions () {
            return this.laterNonCriticalExtensions;
        }

        
        public boolean isLaterNonCriticalExtensionsPresent () {
            return this.laterNonCriticalExtensions != null;
        }
        

        public void setLaterNonCriticalExtensions (LaterNonCriticalExtensionsSequenceType value) {
            this.laterNonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_V390nonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_V390nonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(V390nonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "v390nonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private V390nonCriticalExtensionsSequenceType v390nonCriticalExtensions = null;
                
  
        
        public MeasurementIdentity getMeasurementIdentity () {
            return this.measurementIdentity;
        }

        

        public void setMeasurementIdentity (MeasurementIdentity value) {
            this.measurementIdentity = value;
        }
        
  
        
        public MeasuredResults getMeasuredResults () {
            return this.measuredResults;
        }

        
        public boolean isMeasuredResultsPresent () {
            return this.measuredResults != null;
        }
        

        public void setMeasuredResults (MeasuredResults value) {
            this.measuredResults = value;
        }
        
  
        
        public MeasuredResultsOnRACH getMeasuredResultsOnRACH () {
            return this.measuredResultsOnRACH;
        }

        
        public boolean isMeasuredResultsOnRACHPresent () {
            return this.measuredResultsOnRACH != null;
        }
        

        public void setMeasuredResultsOnRACH (MeasuredResultsOnRACH value) {
            this.measuredResultsOnRACH = value;
        }
        
  
        
        public MeasuredResultsList getAdditionalMeasuredResults () {
            return this.additionalMeasuredResults;
        }

        
        public boolean isAdditionalMeasuredResultsPresent () {
            return this.additionalMeasuredResults != null;
        }
        

        public void setAdditionalMeasuredResults (MeasuredResultsList value) {
            this.additionalMeasuredResults = value;
        }
        
  
        
        public EventResults getEventResults () {
            return this.eventResults;
        }

        
        public boolean isEventResultsPresent () {
            return this.eventResults != null;
        }
        

        public void setEventResults (EventResults value) {
            this.eventResults = value;
        }
        
  
        
        public V390nonCriticalExtensionsSequenceType getV390nonCriticalExtensions () {
            return this.v390nonCriticalExtensions;
        }

        
        public boolean isV390nonCriticalExtensionsPresent () {
            return this.v390nonCriticalExtensions != null;
        }
        

        public void setV390nonCriticalExtensions (V390nonCriticalExtensionsSequenceType value) {
            this.v390nonCriticalExtensions = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(MeasurementReport.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            