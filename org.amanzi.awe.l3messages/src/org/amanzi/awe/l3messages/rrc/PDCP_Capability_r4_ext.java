
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "PDCP_Capability_r4_ext", isSet = false )
    public class PDCP_Capability_r4_ext implements IASN1PreparedElement {
            
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "supportForRfc3095" )
    public static class SupportForRfc3095ChoiceType implements IASN1PreparedElement {
            
        @ASN1Null ( name = "notSupported" ) 
    
        @ASN1Element ( name = "notSupported", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject notSupported = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "supported" , isSet = false )
       public static class SupportedSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "maxROHC-ContextSessions", isOptional =  false , hasTag =  false  , hasDefaultValue =  true  )
    
	private MaxROHC_ContextSessions_r4 maxROHC_ContextSessions = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 65535L 
		
	   )
	   
        @ASN1Element ( name = "reverseCompressionDepth", isOptional =  false , hasTag =  false  , hasDefaultValue =  true  )
    
	private Integer reverseCompressionDepth = null;
                
  
        
        public MaxROHC_ContextSessions_r4 getMaxROHC_ContextSessions () {
            return this.maxROHC_ContextSessions;
        }

        

        public void setMaxROHC_ContextSessions (MaxROHC_ContextSessions_r4 value) {
            this.maxROHC_ContextSessions = value;
        }
        
  
        
        public Integer getReverseCompressionDepth () {
            return this.reverseCompressionDepth;
        }

        

        public void setReverseCompressionDepth (Integer value) {
            this.reverseCompressionDepth = value;
        }
        
  
                
                
        public void initWithDefaults() {
            MaxROHC_ContextSessions_r4 param_MaxROHC_ContextSessions = new MaxROHC_ContextSessions_r4();
            param_MaxROHC_ContextSessions.setValue(MaxROHC_ContextSessions_r4.EnumType.s16);
        setMaxROHC_ContextSessions(param_MaxROHC_ContextSessions);
    Integer param_ReverseCompressionDepth =         
            new Integer ( 0);
        setReverseCompressionDepth(param_ReverseCompressionDepth);
    
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_SupportedSequenceType;
        }

       private static IASN1PreparedElementData preparedData_SupportedSequenceType = CoderFactory.getInstance().newPreparedElementData(SupportedSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "supported", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private SupportedSequenceType supported = null;
                
  
        
        public org.bn.types.NullObject getNotSupported () {
            return this.notSupported;
        }

        public boolean isNotSupportedSelected () {
            return this.notSupported != null;
        }

        private void setNotSupported (org.bn.types.NullObject value) {
            this.notSupported = value;
        }

        
        public void selectNotSupported () {
            selectNotSupported (new org.bn.types.NullObject());
	}
	
        public void selectNotSupported (org.bn.types.NullObject value) {
            this.notSupported = value;
            
                    setSupported(null);
                            
        }

        
  
        
        public SupportedSequenceType getSupported () {
            return this.supported;
        }

        public boolean isSupportedSelected () {
            return this.supported != null;
        }

        private void setSupported (SupportedSequenceType value) {
            this.supported = value;
        }

        
        public void selectSupported (SupportedSequenceType value) {
            this.supported = value;
            
                    setNotSupported(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_SupportForRfc3095ChoiceType;
        }

        private static IASN1PreparedElementData preparedData_SupportForRfc3095ChoiceType = CoderFactory.getInstance().newPreparedElementData(SupportForRfc3095ChoiceType.class);

    }

                
        @ASN1Element ( name = "supportForRfc3095", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private SupportForRfc3095ChoiceType supportForRfc3095 = null;
                
  
        
        public SupportForRfc3095ChoiceType getSupportForRfc3095 () {
            return this.supportForRfc3095;
        }

        

        public void setSupportForRfc3095 (SupportForRfc3095ChoiceType value) {
            this.supportForRfc3095 = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(PDCP_Capability_r4_ext.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            