
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "HandoverToUTRANComplete", isSet = false )
    public class HandoverToUTRANComplete implements IASN1PreparedElement {
            
        @ASN1Element ( name = "startList", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private STARTList startList = null;
                
  
        @ASN1Element ( name = "count-C-ActivationTime", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ActivationTime count_C_ActivationTime = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "laterNonCriticalExtensions" , isSet = false )
       public static class LaterNonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                @ASN1BitString( name = "" )
    
        @ASN1Element ( name = "handoverToUTRANComplete-r3-add-ext", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private BitString handoverToUTRANComplete_r3_add_ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "nonCriticalExtensions" , isSet = false )
       public static class NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "nonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonCriticalExtensionsSequenceType nonCriticalExtensions = null;
                
  
        
        public BitString getHandoverToUTRANComplete_r3_add_ext () {
            return this.handoverToUTRANComplete_r3_add_ext;
        }

        
        public boolean isHandoverToUTRANComplete_r3_add_extPresent () {
            return this.handoverToUTRANComplete_r3_add_ext != null;
        }
        

        public void setHandoverToUTRANComplete_r3_add_ext (BitString value) {
            this.handoverToUTRANComplete_r3_add_ext = value;
        }
        
  
        
        public NonCriticalExtensionsSequenceType getNonCriticalExtensions () {
            return this.nonCriticalExtensions;
        }

        
        public boolean isNonCriticalExtensionsPresent () {
            return this.nonCriticalExtensions != null;
        }
        

        public void setNonCriticalExtensions (NonCriticalExtensionsSequenceType value) {
            this.nonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_LaterNonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_LaterNonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(LaterNonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "laterNonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private LaterNonCriticalExtensionsSequenceType laterNonCriticalExtensions = null;
                
  
        
        public STARTList getStartList () {
            return this.startList;
        }

        
        public boolean isStartListPresent () {
            return this.startList != null;
        }
        

        public void setStartList (STARTList value) {
            this.startList = value;
        }
        
  
        
        public ActivationTime getCount_C_ActivationTime () {
            return this.count_C_ActivationTime;
        }

        
        public boolean isCount_C_ActivationTimePresent () {
            return this.count_C_ActivationTime != null;
        }
        

        public void setCount_C_ActivationTime (ActivationTime value) {
            this.count_C_ActivationTime = value;
        }
        
  
        
        public LaterNonCriticalExtensionsSequenceType getLaterNonCriticalExtensions () {
            return this.laterNonCriticalExtensions;
        }

        
        public boolean isLaterNonCriticalExtensionsPresent () {
            return this.laterNonCriticalExtensions != null;
        }
        

        public void setLaterNonCriticalExtensions (LaterNonCriticalExtensionsSequenceType value) {
            this.laterNonCriticalExtensions = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(HandoverToUTRANComplete.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            