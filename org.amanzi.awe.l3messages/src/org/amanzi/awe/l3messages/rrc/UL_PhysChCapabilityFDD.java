
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "UL_PhysChCapabilityFDD", isSet = false )
    public class UL_PhysChCapabilityFDD implements IASN1PreparedElement {
            
        @ASN1Element ( name = "maxNoDPDCH-BitsTransmitted", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MaxNoDPDCH_BitsTransmitted maxNoDPDCH_BitsTransmitted = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "dummy", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Boolean dummy = null;
                
  
        
        public MaxNoDPDCH_BitsTransmitted getMaxNoDPDCH_BitsTransmitted () {
            return this.maxNoDPDCH_BitsTransmitted;
        }

        

        public void setMaxNoDPDCH_BitsTransmitted (MaxNoDPDCH_BitsTransmitted value) {
            this.maxNoDPDCH_BitsTransmitted = value;
        }
        
  
        
        public Boolean getDummy () {
            return this.dummy;
        }

        

        public void setDummy (Boolean value) {
            this.dummy = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(UL_PhysChCapabilityFDD.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            