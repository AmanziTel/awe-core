
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1BitString;
import org.bn.annotations.ASN1Choice;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;
import org.bn.types.BitString;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "HandoverFromUTRANFailure", isSet = false )
    public class HandoverFromUTRANFailure implements IASN1PreparedElement {
            
        @ASN1Element ( name = "rrc-TransactionIdentifier", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private RRC_TransactionIdentifier rrc_TransactionIdentifier = null;
                
  
        @ASN1Element ( name = "interRAT-HO-FailureCause", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private InterRAT_HO_FailureCause interRAT_HO_FailureCause = null;
                
  
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "interRATMessage" )
    public static class InterRATMessageChoiceType implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "gsm" , isSet = false )
       public static class GsmSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "gsm-MessageList", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private GSM_MessageList gsm_MessageList = null;
                
  
        
        public GSM_MessageList getGsm_MessageList () {
            return this.gsm_MessageList;
        }

        

        public void setGsm_MessageList (GSM_MessageList value) {
            this.gsm_MessageList = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_GsmSequenceType;
        }

       private static IASN1PreparedElementData preparedData_GsmSequenceType = CoderFactory.getInstance().newPreparedElementData(GsmSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "gsm", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private GsmSequenceType gsm = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "cdma2000" , isSet = false )
       public static class Cdma2000SequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "cdma2000-MessageList", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CDMA2000_MessageList cdma2000_MessageList = null;
                
  
        
        public CDMA2000_MessageList getCdma2000_MessageList () {
            return this.cdma2000_MessageList;
        }

        

        public void setCdma2000_MessageList (CDMA2000_MessageList value) {
            this.cdma2000_MessageList = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_Cdma2000SequenceType;
        }

       private static IASN1PreparedElementData preparedData_Cdma2000SequenceType = CoderFactory.getInstance().newPreparedElementData(Cdma2000SequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "cdma2000", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Cdma2000SequenceType cdma2000 = null;
                
  
        
        public GsmSequenceType getGsm () {
            return this.gsm;
        }

        public boolean isGsmSelected () {
            return this.gsm != null;
        }

        private void setGsm (GsmSequenceType value) {
            this.gsm = value;
        }

        
        public void selectGsm (GsmSequenceType value) {
            this.gsm = value;
            
                    setCdma2000(null);
                            
        }

        
  
        
        public Cdma2000SequenceType getCdma2000 () {
            return this.cdma2000;
        }

        public boolean isCdma2000Selected () {
            return this.cdma2000 != null;
        }

        private void setCdma2000 (Cdma2000SequenceType value) {
            this.cdma2000 = value;
        }

        
        public void selectCdma2000 (Cdma2000SequenceType value) {
            this.cdma2000 = value;
            
                    setGsm(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_InterRATMessageChoiceType;
        }

        private static IASN1PreparedElementData preparedData_InterRATMessageChoiceType = CoderFactory.getInstance().newPreparedElementData(InterRATMessageChoiceType.class);

    }

                
        @ASN1Element ( name = "interRATMessage", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private InterRATMessageChoiceType interRATMessage = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "laterNonCriticalExtensions" , isSet = false )
       public static class LaterNonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                @ASN1BitString( name = "" )
    
        @ASN1Element ( name = "handoverFromUTRANFailure-r3-add-ext", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private BitString handoverFromUTRANFailure_r3_add_ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "v590NonCriticalExtensions" , isSet = false )
       public static class V590NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "handoverFromUTRANFailure-v590ext", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private HandoverFromUtranFailure_v590ext_IEs handoverFromUTRANFailure_v590ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "nonCriticalExtensions" , isSet = false )
       public static class NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "nonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonCriticalExtensionsSequenceType nonCriticalExtensions = null;
                
  
        
        public HandoverFromUtranFailure_v590ext_IEs getHandoverFromUTRANFailure_v590ext () {
            return this.handoverFromUTRANFailure_v590ext;
        }

        

        public void setHandoverFromUTRANFailure_v590ext (HandoverFromUtranFailure_v590ext_IEs value) {
            this.handoverFromUTRANFailure_v590ext = value;
        }
        
  
        
        public NonCriticalExtensionsSequenceType getNonCriticalExtensions () {
            return this.nonCriticalExtensions;
        }

        
        public boolean isNonCriticalExtensionsPresent () {
            return this.nonCriticalExtensions != null;
        }
        

        public void setNonCriticalExtensions (NonCriticalExtensionsSequenceType value) {
            this.nonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_V590NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_V590NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(V590NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "v590NonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private V590NonCriticalExtensionsSequenceType v590NonCriticalExtensions = null;
                
  
        
        public BitString getHandoverFromUTRANFailure_r3_add_ext () {
            return this.handoverFromUTRANFailure_r3_add_ext;
        }

        
        public boolean isHandoverFromUTRANFailure_r3_add_extPresent () {
            return this.handoverFromUTRANFailure_r3_add_ext != null;
        }
        

        public void setHandoverFromUTRANFailure_r3_add_ext (BitString value) {
            this.handoverFromUTRANFailure_r3_add_ext = value;
        }
        
  
        
        public V590NonCriticalExtensionsSequenceType getV590NonCriticalExtensions () {
            return this.v590NonCriticalExtensions;
        }

        
        public boolean isV590NonCriticalExtensionsPresent () {
            return this.v590NonCriticalExtensions != null;
        }
        

        public void setV590NonCriticalExtensions (V590NonCriticalExtensionsSequenceType value) {
            this.v590NonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_LaterNonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_LaterNonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(LaterNonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "laterNonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private LaterNonCriticalExtensionsSequenceType laterNonCriticalExtensions = null;
                
  
        
        public RRC_TransactionIdentifier getRrc_TransactionIdentifier () {
            return this.rrc_TransactionIdentifier;
        }

        

        public void setRrc_TransactionIdentifier (RRC_TransactionIdentifier value) {
            this.rrc_TransactionIdentifier = value;
        }
        
  
        
        public InterRAT_HO_FailureCause getInterRAT_HO_FailureCause () {
            return this.interRAT_HO_FailureCause;
        }

        
        public boolean isInterRAT_HO_FailureCausePresent () {
            return this.interRAT_HO_FailureCause != null;
        }
        

        public void setInterRAT_HO_FailureCause (InterRAT_HO_FailureCause value) {
            this.interRAT_HO_FailureCause = value;
        }
        
  
        
        public InterRATMessageChoiceType getInterRATMessage () {
            return this.interRATMessage;
        }

        
        public boolean isInterRATMessagePresent () {
            return this.interRATMessage != null;
        }
        

        public void setInterRATMessage (InterRATMessageChoiceType value) {
            this.interRATMessage = value;
        }
        
  
        
        public LaterNonCriticalExtensionsSequenceType getLaterNonCriticalExtensions () {
            return this.laterNonCriticalExtensions;
        }

        
        public boolean isLaterNonCriticalExtensionsPresent () {
            return this.laterNonCriticalExtensions != null;
        }
        

        public void setLaterNonCriticalExtensions (LaterNonCriticalExtensionsSequenceType value) {
            this.laterNonCriticalExtensions = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(HandoverFromUTRANFailure.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            