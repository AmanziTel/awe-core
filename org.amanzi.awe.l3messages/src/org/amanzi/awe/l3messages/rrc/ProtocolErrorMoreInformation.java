
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1Choice;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1Null;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "ProtocolErrorMoreInformation", isSet = false )
    public class ProtocolErrorMoreInformation implements IASN1PreparedElement {
            
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "diagnosticsType" )
    public static class DiagnosticsTypeChoiceType implements IASN1PreparedElement {
            
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "type1" )
    public static class Type1ChoiceType implements IASN1PreparedElement {
            
        @ASN1Null ( name = "asn1-ViolationOrEncodingError" ) 
    
        @ASN1Element ( name = "asn1-ViolationOrEncodingError", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject asn1_ViolationOrEncodingError = null;
                
  
        @ASN1Null ( name = "messageTypeNonexistent" ) 
    
        @ASN1Element ( name = "messageTypeNonexistent", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject messageTypeNonexistent = null;
                
  
        @ASN1Element ( name = "messageNotCompatibleWithReceiverState", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private IdentificationOfReceivedMessage messageNotCompatibleWithReceiverState = null;
                
  
        @ASN1Element ( name = "ie-ValueNotComprehended", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private IdentificationOfReceivedMessage ie_ValueNotComprehended = null;
                
  
        @ASN1Element ( name = "conditionalInformationElementError", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private IdentificationOfReceivedMessage conditionalInformationElementError = null;
                
  
        @ASN1Element ( name = "messageExtensionNotComprehended", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private IdentificationOfReceivedMessage messageExtensionNotComprehended = null;
                
  
        @ASN1Null ( name = "spare1" ) 
    
        @ASN1Element ( name = "spare1", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject spare1 = null;
                
  
        @ASN1Null ( name = "spare2" ) 
    
        @ASN1Element ( name = "spare2", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject spare2 = null;
                
  
        
        public org.bn.types.NullObject getAsn1_ViolationOrEncodingError () {
            return this.asn1_ViolationOrEncodingError;
        }

        public boolean isAsn1_ViolationOrEncodingErrorSelected () {
            return this.asn1_ViolationOrEncodingError != null;
        }

        private void setAsn1_ViolationOrEncodingError (org.bn.types.NullObject value) {
            this.asn1_ViolationOrEncodingError = value;
        }

        
        public void selectAsn1_ViolationOrEncodingError () {
            selectAsn1_ViolationOrEncodingError (new org.bn.types.NullObject());
	}
	
        public void selectAsn1_ViolationOrEncodingError (org.bn.types.NullObject value) {
            this.asn1_ViolationOrEncodingError = value;
            
                    setAsn1_ViolationOrEncodingError(null);
                
                    setMessageTypeNonexistent(null);
                
                    setMessageNotCompatibleWithReceiverState(null);
                
                    setIe_ValueNotComprehended(null);
                
                    setConditionalInformationElementError(null);
                
                    setMessageExtensionNotComprehended(null);
                
                    setSpare1(null);
                
                    setSpare2(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getMessageTypeNonexistent () {
            return this.messageTypeNonexistent;
        }

        public boolean isMessageTypeNonexistentSelected () {
            return this.messageTypeNonexistent != null;
        }

        private void setMessageTypeNonexistent (org.bn.types.NullObject value) {
            this.messageTypeNonexistent = value;
        }

        
        public void selectMessageTypeNonexistent () {
            selectMessageTypeNonexistent (new org.bn.types.NullObject());
	}
	
        public void selectMessageTypeNonexistent (org.bn.types.NullObject value) {
            this.messageTypeNonexistent = value;
            
                    setAsn1_ViolationOrEncodingError(null);
                
                    setMessageNotCompatibleWithReceiverState(null);
                
                    setIe_ValueNotComprehended(null);
                
                    setConditionalInformationElementError(null);
                
                    setMessageExtensionNotComprehended(null);
                
                    setSpare1(null);
                
                    setSpare2(null);
                            
        }

        
  
        
        public IdentificationOfReceivedMessage getMessageNotCompatibleWithReceiverState () {
            return this.messageNotCompatibleWithReceiverState;
        }

        public boolean isMessageNotCompatibleWithReceiverStateSelected () {
            return this.messageNotCompatibleWithReceiverState != null;
        }

        private void setMessageNotCompatibleWithReceiverState (IdentificationOfReceivedMessage value) {
            this.messageNotCompatibleWithReceiverState = value;
        }

        
        public void selectMessageNotCompatibleWithReceiverState (IdentificationOfReceivedMessage value) {
            this.messageNotCompatibleWithReceiverState = value;
            
                    setAsn1_ViolationOrEncodingError(null);
                
                    setMessageTypeNonexistent(null);
                
                    setIe_ValueNotComprehended(null);
                
                    setConditionalInformationElementError(null);
                
                    setMessageExtensionNotComprehended(null);
                
                    setSpare1(null);
                
                    setSpare2(null);
                            
        }

        
  
        
        public IdentificationOfReceivedMessage getIe_ValueNotComprehended () {
            return this.ie_ValueNotComprehended;
        }

        public boolean isIe_ValueNotComprehendedSelected () {
            return this.ie_ValueNotComprehended != null;
        }

        private void setIe_ValueNotComprehended (IdentificationOfReceivedMessage value) {
            this.ie_ValueNotComprehended = value;
        }

        
        public void selectIe_ValueNotComprehended (IdentificationOfReceivedMessage value) {
            this.ie_ValueNotComprehended = value;
            
                    setAsn1_ViolationOrEncodingError(null);
                
                    setMessageTypeNonexistent(null);
                
                    setMessageNotCompatibleWithReceiverState(null);
                
                    setIe_ValueNotComprehended(null);
                
                    setConditionalInformationElementError(null);
                
                    setMessageExtensionNotComprehended(null);
                
                    setSpare1(null);
                
                    setSpare2(null);
                            
        }

        
  
        
        public IdentificationOfReceivedMessage getConditionalInformationElementError () {
            return this.conditionalInformationElementError;
        }

        public boolean isConditionalInformationElementErrorSelected () {
            return this.conditionalInformationElementError != null;
        }

        private void setConditionalInformationElementError (IdentificationOfReceivedMessage value) {
            this.conditionalInformationElementError = value;
        }

        
        public void selectConditionalInformationElementError (IdentificationOfReceivedMessage value) {
            this.conditionalInformationElementError = value;
            
                    setAsn1_ViolationOrEncodingError(null);
                
                    setMessageTypeNonexistent(null);
                
                    setMessageNotCompatibleWithReceiverState(null);
                
                    setIe_ValueNotComprehended(null);
                
                    setMessageExtensionNotComprehended(null);
                
                    setSpare1(null);
                
                    setSpare2(null);
                            
        }

        
  
        
        public IdentificationOfReceivedMessage getMessageExtensionNotComprehended () {
            return this.messageExtensionNotComprehended;
        }

        public boolean isMessageExtensionNotComprehendedSelected () {
            return this.messageExtensionNotComprehended != null;
        }

        private void setMessageExtensionNotComprehended (IdentificationOfReceivedMessage value) {
            this.messageExtensionNotComprehended = value;
        }

        
        public void selectMessageExtensionNotComprehended (IdentificationOfReceivedMessage value) {
            this.messageExtensionNotComprehended = value;
            
                    setAsn1_ViolationOrEncodingError(null);
                
                    setMessageTypeNonexistent(null);
                
                    setMessageNotCompatibleWithReceiverState(null);
                
                    setIe_ValueNotComprehended(null);
                
                    setConditionalInformationElementError(null);
                
                    setSpare1(null);
                
                    setSpare2(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getSpare1 () {
            return this.spare1;
        }

        public boolean isSpare1Selected () {
            return this.spare1 != null;
        }

        private void setSpare1 (org.bn.types.NullObject value) {
            this.spare1 = value;
        }

        
        public void selectSpare1 () {
            selectSpare1 (new org.bn.types.NullObject());
	}
	
        public void selectSpare1 (org.bn.types.NullObject value) {
            this.spare1 = value;
            
                    setAsn1_ViolationOrEncodingError(null);
                
                    setMessageTypeNonexistent(null);
                
                    setMessageNotCompatibleWithReceiverState(null);
                
                    setIe_ValueNotComprehended(null);
                
                    setConditionalInformationElementError(null);
                
                    setMessageExtensionNotComprehended(null);
                
                    setSpare2(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getSpare2 () {
            return this.spare2;
        }

        public boolean isSpare2Selected () {
            return this.spare2 != null;
        }

        private void setSpare2 (org.bn.types.NullObject value) {
            this.spare2 = value;
        }

        
        public void selectSpare2 () {
            selectSpare2 (new org.bn.types.NullObject());
	}
	
        public void selectSpare2 (org.bn.types.NullObject value) {
            this.spare2 = value;
            
                    setAsn1_ViolationOrEncodingError(null);
                
                    setMessageTypeNonexistent(null);
                
                    setMessageNotCompatibleWithReceiverState(null);
                
                    setIe_ValueNotComprehended(null);
                
                    setConditionalInformationElementError(null);
                
                    setMessageExtensionNotComprehended(null);
                
                    setSpare1(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_Type1ChoiceType;
        }

        private static IASN1PreparedElementData preparedData_Type1ChoiceType = CoderFactory.getInstance().newPreparedElementData(Type1ChoiceType.class);

    }

                
        @ASN1Element ( name = "type1", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Type1ChoiceType type1 = null;
                
  
        @ASN1Null ( name = "spare" ) 
    
        @ASN1Element ( name = "spare", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject spare = null;
                
  
        
        public Type1ChoiceType getType1 () {
            return this.type1;
        }

        public boolean isType1Selected () {
            return this.type1 != null;
        }

        private void setType1 (Type1ChoiceType value) {
            this.type1 = value;
        }

        
        public void selectType1 (Type1ChoiceType value) {
            this.type1 = value;
            
                    setSpare(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getSpare () {
            return this.spare;
        }

        public boolean isSpareSelected () {
            return this.spare != null;
        }

        private void setSpare (org.bn.types.NullObject value) {
            this.spare = value;
        }

        
        public void selectSpare () {
            selectSpare (new org.bn.types.NullObject());
	}
	
        public void selectSpare (org.bn.types.NullObject value) {
            this.spare = value;
            
                    setType1(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_DiagnosticsTypeChoiceType;
        }

        private static IASN1PreparedElementData preparedData_DiagnosticsTypeChoiceType = CoderFactory.getInstance().newPreparedElementData(DiagnosticsTypeChoiceType.class);

    }

                
        @ASN1Element ( name = "diagnosticsType", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private DiagnosticsTypeChoiceType diagnosticsType = null;
                
  
        
        public DiagnosticsTypeChoiceType getDiagnosticsType () {
            return this.diagnosticsType;
        }

        

        public void setDiagnosticsType (DiagnosticsTypeChoiceType value) {
            this.diagnosticsType = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ProtocolErrorMoreInformation.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            