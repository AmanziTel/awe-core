
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1BitString;
import org.bn.annotations.ASN1Choice;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;
import org.bn.types.BitString;




    @ASN1PreparedElement
    @ASN1Choice ( name = "CellChangeOrderFromUTRANFailure" )
    public class CellChangeOrderFromUTRANFailure implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "r3" , isSet = false )
       public static class R3SequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "cellChangeOrderFromUTRANFailure-r3", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CellChangeOrderFromUTRANFailure_r3_IEs cellChangeOrderFromUTRANFailure_r3 = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "laterNonCriticalExtensions" , isSet = false )
       public static class LaterNonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                @ASN1BitString( name = "" )
    
        @ASN1Element ( name = "cellChangeOrderFromUTRANFailure-r3-add-ext", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private BitString cellChangeOrderFromUTRANFailure_r3_add_ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "nonCriticalExtensions" , isSet = false )
       public static class NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "nonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonCriticalExtensionsSequenceType nonCriticalExtensions = null;
                
  
        
        public BitString getCellChangeOrderFromUTRANFailure_r3_add_ext () {
            return this.cellChangeOrderFromUTRANFailure_r3_add_ext;
        }

        
        public boolean isCellChangeOrderFromUTRANFailure_r3_add_extPresent () {
            return this.cellChangeOrderFromUTRANFailure_r3_add_ext != null;
        }
        

        public void setCellChangeOrderFromUTRANFailure_r3_add_ext (BitString value) {
            this.cellChangeOrderFromUTRANFailure_r3_add_ext = value;
        }
        
  
        
        public NonCriticalExtensionsSequenceType getNonCriticalExtensions () {
            return this.nonCriticalExtensions;
        }

        
        public boolean isNonCriticalExtensionsPresent () {
            return this.nonCriticalExtensions != null;
        }
        

        public void setNonCriticalExtensions (NonCriticalExtensionsSequenceType value) {
            this.nonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_LaterNonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_LaterNonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(LaterNonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "laterNonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private LaterNonCriticalExtensionsSequenceType laterNonCriticalExtensions = null;
                
  
        
        public CellChangeOrderFromUTRANFailure_r3_IEs getCellChangeOrderFromUTRANFailure_r3 () {
            return this.cellChangeOrderFromUTRANFailure_r3;
        }

        

        public void setCellChangeOrderFromUTRANFailure_r3 (CellChangeOrderFromUTRANFailure_r3_IEs value) {
            this.cellChangeOrderFromUTRANFailure_r3 = value;
        }
        
  
        
        public LaterNonCriticalExtensionsSequenceType getLaterNonCriticalExtensions () {
            return this.laterNonCriticalExtensions;
        }

        
        public boolean isLaterNonCriticalExtensionsPresent () {
            return this.laterNonCriticalExtensions != null;
        }
        

        public void setLaterNonCriticalExtensions (LaterNonCriticalExtensionsSequenceType value) {
            this.laterNonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_R3SequenceType;
        }

       private static IASN1PreparedElementData preparedData_R3SequenceType = CoderFactory.getInstance().newPreparedElementData(R3SequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "r3", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private R3SequenceType r3 = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "dummy" , isSet = false )
       public static class DummySequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "rrc-TransactionIdentifier", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private RRC_TransactionIdentifier rrc_TransactionIdentifier = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "criticalExtensions" , isSet = false )
       public static class CriticalExtensionsSequenceType implements IASN1PreparedElement {
                
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_CriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_CriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(CriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "criticalExtensions", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CriticalExtensionsSequenceType criticalExtensions = null;
                
  
        
        public RRC_TransactionIdentifier getRrc_TransactionIdentifier () {
            return this.rrc_TransactionIdentifier;
        }

        

        public void setRrc_TransactionIdentifier (RRC_TransactionIdentifier value) {
            this.rrc_TransactionIdentifier = value;
        }
        
  
        
        public CriticalExtensionsSequenceType getCriticalExtensions () {
            return this.criticalExtensions;
        }

        

        public void setCriticalExtensions (CriticalExtensionsSequenceType value) {
            this.criticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_DummySequenceType;
        }

       private static IASN1PreparedElementData preparedData_DummySequenceType = CoderFactory.getInstance().newPreparedElementData(DummySequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "dummy", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private DummySequenceType dummy = null;
                
  
        
        public R3SequenceType getR3 () {
            return this.r3;
        }

        public boolean isR3Selected () {
            return this.r3 != null;
        }

        private void setR3 (R3SequenceType value) {
            this.r3 = value;
        }

        
        public void selectR3 (R3SequenceType value) {
            this.r3 = value;
            
                    setDummy(null);
                            
        }

        
  
        
        public DummySequenceType getDummy () {
            return this.dummy;
        }

        public boolean isDummySelected () {
            return this.dummy != null;
        }

        private void setDummy (DummySequenceType value) {
            this.dummy = value;
        }

        
        public void selectDummy (DummySequenceType value) {
            this.dummy = value;
            
                    setR3(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(CellChangeOrderFromUTRANFailure.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            