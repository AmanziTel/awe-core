
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1Choice;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1Integer;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.annotations.constraints.ASN1ValueRangeConstraint;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "CellSynchronisationInfo", isSet = false )
    public class CellSynchronisationInfo implements IASN1PreparedElement {
            
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "modeSpecificInfo" )
    public static class ModeSpecificInfoChoiceType implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "fdd" , isSet = false )
       public static class FddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "countC-SFN-Frame-difference", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private CountC_SFN_Frame_difference countC_SFN_Frame_difference = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 38399L 
		
	   )
	   
        @ASN1Element ( name = "tm", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer tm = null;
                
  
        
        public CountC_SFN_Frame_difference getCountC_SFN_Frame_difference () {
            return this.countC_SFN_Frame_difference;
        }

        
        public boolean isCountC_SFN_Frame_differencePresent () {
            return this.countC_SFN_Frame_difference != null;
        }
        

        public void setCountC_SFN_Frame_difference (CountC_SFN_Frame_difference value) {
            this.countC_SFN_Frame_difference = value;
        }
        
  
        
        public Integer getTm () {
            return this.tm;
        }

        

        public void setTm (Integer value) {
            this.tm = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_FddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_FddSequenceType = CoderFactory.getInstance().newPreparedElementData(FddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "fdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private FddSequenceType fdd = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "tdd" , isSet = false )
       public static class TddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "countC-SFN-Frame-difference", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private CountC_SFN_Frame_difference countC_SFN_Frame_difference = null;
                
  
        
        public CountC_SFN_Frame_difference getCountC_SFN_Frame_difference () {
            return this.countC_SFN_Frame_difference;
        }

        
        public boolean isCountC_SFN_Frame_differencePresent () {
            return this.countC_SFN_Frame_difference != null;
        }
        

        public void setCountC_SFN_Frame_difference (CountC_SFN_Frame_difference value) {
            this.countC_SFN_Frame_difference = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TddSequenceType = CoderFactory.getInstance().newPreparedElementData(TddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "tdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TddSequenceType tdd = null;
                
  
        
        public FddSequenceType getFdd () {
            return this.fdd;
        }

        public boolean isFddSelected () {
            return this.fdd != null;
        }

        private void setFdd (FddSequenceType value) {
            this.fdd = value;
        }

        
        public void selectFdd (FddSequenceType value) {
            this.fdd = value;
            
                    setTdd(null);
                            
        }

        
  
        
        public TddSequenceType getTdd () {
            return this.tdd;
        }

        public boolean isTddSelected () {
            return this.tdd != null;
        }

        private void setTdd (TddSequenceType value) {
            this.tdd = value;
        }

        
        public void selectTdd (TddSequenceType value) {
            this.tdd = value;
            
                    setFdd(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ModeSpecificInfoChoiceType;
        }

        private static IASN1PreparedElementData preparedData_ModeSpecificInfoChoiceType = CoderFactory.getInstance().newPreparedElementData(ModeSpecificInfoChoiceType.class);

    }

                
        @ASN1Element ( name = "modeSpecificInfo", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ModeSpecificInfoChoiceType modeSpecificInfo = null;
                
  
        
        public ModeSpecificInfoChoiceType getModeSpecificInfo () {
            return this.modeSpecificInfo;
        }

        

        public void setModeSpecificInfo (ModeSpecificInfoChoiceType value) {
            this.modeSpecificInfo = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(CellSynchronisationInfo.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            