
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "UE_RadioAccessCapabBandFDD", isSet = false )
    public class UE_RadioAccessCapabBandFDD implements IASN1PreparedElement {
            
        @ASN1Element ( name = "radioFrequencyBandFDD", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private RadioFrequencyBandFDD radioFrequencyBandFDD = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "fddRF_Capability" , isSet = false )
       public static class FddRF_CapabilitySequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "ue-PowerClass", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private UE_PowerClassExt ue_PowerClass = null;
                
  
        @ASN1Element ( name = "txRxFrequencySeparation", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TxRxFrequencySeparation txRxFrequencySeparation = null;
                
  
        
        public UE_PowerClassExt getUe_PowerClass () {
            return this.ue_PowerClass;
        }

        

        public void setUe_PowerClass (UE_PowerClassExt value) {
            this.ue_PowerClass = value;
        }
        
  
        
        public TxRxFrequencySeparation getTxRxFrequencySeparation () {
            return this.txRxFrequencySeparation;
        }

        

        public void setTxRxFrequencySeparation (TxRxFrequencySeparation value) {
            this.txRxFrequencySeparation = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_FddRF_CapabilitySequenceType;
        }

       private static IASN1PreparedElementData preparedData_FddRF_CapabilitySequenceType = CoderFactory.getInstance().newPreparedElementData(FddRF_CapabilitySequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "fddRF_Capability", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private FddRF_CapabilitySequenceType fddRF_Capability = null;
                
  
        @ASN1Element ( name = "measurementCapability", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementCapabilityExt measurementCapability = null;
                
  
        
        public RadioFrequencyBandFDD getRadioFrequencyBandFDD () {
            return this.radioFrequencyBandFDD;
        }

        

        public void setRadioFrequencyBandFDD (RadioFrequencyBandFDD value) {
            this.radioFrequencyBandFDD = value;
        }
        
  
        
        public FddRF_CapabilitySequenceType getFddRF_Capability () {
            return this.fddRF_Capability;
        }

        
        public boolean isFddRF_CapabilityPresent () {
            return this.fddRF_Capability != null;
        }
        

        public void setFddRF_Capability (FddRF_CapabilitySequenceType value) {
            this.fddRF_Capability = value;
        }
        
  
        
        public MeasurementCapabilityExt getMeasurementCapability () {
            return this.measurementCapability;
        }

        

        public void setMeasurementCapability (MeasurementCapabilityExt value) {
            this.measurementCapability = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(UE_RadioAccessCapabBandFDD.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            