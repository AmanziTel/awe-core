
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1Boolean;
import org.bn.annotations.ASN1Choice;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1Null;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "PDCP_Capability", isSet = false )
    public class PDCP_Capability implements IASN1PreparedElement {
            @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "losslessSRNS-RelocationSupport", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Boolean losslessSRNS_RelocationSupport = null;
                
  
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "supportForRfc2507" )
    public static class SupportForRfc2507ChoiceType implements IASN1PreparedElement {
            
        @ASN1Null ( name = "notSupported" ) 
    
        @ASN1Element ( name = "notSupported", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject notSupported = null;
                
  
        @ASN1Element ( name = "supported", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MaxHcContextSpace supported = null;
                
  
        
        public org.bn.types.NullObject getNotSupported () {
            return this.notSupported;
        }

        public boolean isNotSupportedSelected () {
            return this.notSupported != null;
        }

        private void setNotSupported (org.bn.types.NullObject value) {
            this.notSupported = value;
        }

        
        public void selectNotSupported () {
            selectNotSupported (new org.bn.types.NullObject());
	}
	
        public void selectNotSupported (org.bn.types.NullObject value) {
            this.notSupported = value;
            
                    setSupported(null);
                            
        }

        
  
        
        public MaxHcContextSpace getSupported () {
            return this.supported;
        }

        public boolean isSupportedSelected () {
            return this.supported != null;
        }

        private void setSupported (MaxHcContextSpace value) {
            this.supported = value;
        }

        
        public void selectSupported (MaxHcContextSpace value) {
            this.supported = value;
            
                    setNotSupported(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_SupportForRfc2507ChoiceType;
        }

        private static IASN1PreparedElementData preparedData_SupportForRfc2507ChoiceType = CoderFactory.getInstance().newPreparedElementData(SupportForRfc2507ChoiceType.class);

    }

                
        @ASN1Element ( name = "supportForRfc2507", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private SupportForRfc2507ChoiceType supportForRfc2507 = null;
                
  
        
        public Boolean getLosslessSRNS_RelocationSupport () {
            return this.losslessSRNS_RelocationSupport;
        }

        

        public void setLosslessSRNS_RelocationSupport (Boolean value) {
            this.losslessSRNS_RelocationSupport = value;
        }
        
  
        
        public SupportForRfc2507ChoiceType getSupportForRfc2507 () {
            return this.supportForRfc2507;
        }

        

        public void setSupportForRfc2507 (SupportForRfc2507ChoiceType value) {
            this.supportForRfc2507 = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(PDCP_Capability.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            