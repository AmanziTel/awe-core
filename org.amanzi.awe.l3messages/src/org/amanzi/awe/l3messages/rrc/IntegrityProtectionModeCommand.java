
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Choice ( name = "IntegrityProtectionModeCommand" )
    public class IntegrityProtectionModeCommand implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "startIntegrityProtection" , isSet = false )
       public static class StartIntegrityProtectionSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "integrityProtInitNumber", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private IntegrityProtInitNumber integrityProtInitNumber = null;
                
  
        
        public IntegrityProtInitNumber getIntegrityProtInitNumber () {
            return this.integrityProtInitNumber;
        }

        

        public void setIntegrityProtInitNumber (IntegrityProtInitNumber value) {
            this.integrityProtInitNumber = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_StartIntegrityProtectionSequenceType;
        }

       private static IASN1PreparedElementData preparedData_StartIntegrityProtectionSequenceType = CoderFactory.getInstance().newPreparedElementData(StartIntegrityProtectionSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "startIntegrityProtection", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private StartIntegrityProtectionSequenceType startIntegrityProtection = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "modify" , isSet = false )
       public static class ModifySequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "dl-IntegrityProtActivationInfo", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private IntegrityProtActivationInfo dl_IntegrityProtActivationInfo = null;
                
  
        
        public IntegrityProtActivationInfo getDl_IntegrityProtActivationInfo () {
            return this.dl_IntegrityProtActivationInfo;
        }

        

        public void setDl_IntegrityProtActivationInfo (IntegrityProtActivationInfo value) {
            this.dl_IntegrityProtActivationInfo = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ModifySequenceType;
        }

       private static IASN1PreparedElementData preparedData_ModifySequenceType = CoderFactory.getInstance().newPreparedElementData(ModifySequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "modify", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ModifySequenceType modify = null;
                
  
        
        public StartIntegrityProtectionSequenceType getStartIntegrityProtection () {
            return this.startIntegrityProtection;
        }

        public boolean isStartIntegrityProtectionSelected () {
            return this.startIntegrityProtection != null;
        }

        private void setStartIntegrityProtection (StartIntegrityProtectionSequenceType value) {
            this.startIntegrityProtection = value;
        }

        
        public void selectStartIntegrityProtection (StartIntegrityProtectionSequenceType value) {
            this.startIntegrityProtection = value;
            
                    setModify(null);
                            
        }

        
  
        
        public ModifySequenceType getModify () {
            return this.modify;
        }

        public boolean isModifySelected () {
            return this.modify != null;
        }

        private void setModify (ModifySequenceType value) {
            this.modify = value;
        }

        
        public void selectModify (ModifySequenceType value) {
            this.modify = value;
            
                    setStartIntegrityProtection(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(IntegrityProtectionModeCommand.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            