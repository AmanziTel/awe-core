
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1Boolean;
import org.bn.annotations.ASN1Choice;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;




    @ASN1PreparedElement
    @ASN1Choice ( name = "PrimaryCCPCH_Info" )
    public class PrimaryCCPCH_Info implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "fdd" , isSet = false )
       public static class FddSequenceType implements IASN1PreparedElement {
                @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "tx-DiversityIndicator", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Boolean tx_DiversityIndicator = null;
                
  
        
        public Boolean getTx_DiversityIndicator () {
            return this.tx_DiversityIndicator;
        }

        

        public void setTx_DiversityIndicator (Boolean value) {
            this.tx_DiversityIndicator = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_FddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_FddSequenceType = CoderFactory.getInstance().newPreparedElementData(FddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "fdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private FddSequenceType fdd = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "tdd" , isSet = false )
       public static class TddSequenceType implements IASN1PreparedElement {
                
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "syncCase" )
    public static class SyncCaseChoiceType implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "syncCase1" , isSet = false )
       public static class SyncCase1SequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "timeslot", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TimeslotNumber timeslot = null;
                
  
        
        public TimeslotNumber getTimeslot () {
            return this.timeslot;
        }

        

        public void setTimeslot (TimeslotNumber value) {
            this.timeslot = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_SyncCase1SequenceType;
        }

       private static IASN1PreparedElementData preparedData_SyncCase1SequenceType = CoderFactory.getInstance().newPreparedElementData(SyncCase1SequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "syncCase1", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private SyncCase1SequenceType syncCase1 = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "syncCase2" , isSet = false )
       public static class SyncCase2SequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "timeslotSync2", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TimeslotSync2 timeslotSync2 = null;
                
  
        
        public TimeslotSync2 getTimeslotSync2 () {
            return this.timeslotSync2;
        }

        

        public void setTimeslotSync2 (TimeslotSync2 value) {
            this.timeslotSync2 = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_SyncCase2SequenceType;
        }

       private static IASN1PreparedElementData preparedData_SyncCase2SequenceType = CoderFactory.getInstance().newPreparedElementData(SyncCase2SequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "syncCase2", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private SyncCase2SequenceType syncCase2 = null;
                
  
        
        public SyncCase1SequenceType getSyncCase1 () {
            return this.syncCase1;
        }

        public boolean isSyncCase1Selected () {
            return this.syncCase1 != null;
        }

        private void setSyncCase1 (SyncCase1SequenceType value) {
            this.syncCase1 = value;
        }

        
        public void selectSyncCase1 (SyncCase1SequenceType value) {
            this.syncCase1 = value;
            
                    setSyncCase2(null);
                            
        }

        
  
        
        public SyncCase2SequenceType getSyncCase2 () {
            return this.syncCase2;
        }

        public boolean isSyncCase2Selected () {
            return this.syncCase2 != null;
        }

        private void setSyncCase2 (SyncCase2SequenceType value) {
            this.syncCase2 = value;
        }

        
        public void selectSyncCase2 (SyncCase2SequenceType value) {
            this.syncCase2 = value;
            
                    setSyncCase1(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_SyncCaseChoiceType;
        }

        private static IASN1PreparedElementData preparedData_SyncCaseChoiceType = CoderFactory.getInstance().newPreparedElementData(SyncCaseChoiceType.class);

    }

                
        @ASN1Element ( name = "syncCase", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private SyncCaseChoiceType syncCase = null;
                
  
        @ASN1Element ( name = "cellParametersID", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private CellParametersID cellParametersID = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "sctd-Indicator", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Boolean sctd_Indicator = null;
                
  
        
        public SyncCaseChoiceType getSyncCase () {
            return this.syncCase;
        }

        
        public boolean isSyncCasePresent () {
            return this.syncCase != null;
        }
        

        public void setSyncCase (SyncCaseChoiceType value) {
            this.syncCase = value;
        }
        
  
        
        public CellParametersID getCellParametersID () {
            return this.cellParametersID;
        }

        
        public boolean isCellParametersIDPresent () {
            return this.cellParametersID != null;
        }
        

        public void setCellParametersID (CellParametersID value) {
            this.cellParametersID = value;
        }
        
  
        
        public Boolean getSctd_Indicator () {
            return this.sctd_Indicator;
        }

        

        public void setSctd_Indicator (Boolean value) {
            this.sctd_Indicator = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TddSequenceType = CoderFactory.getInstance().newPreparedElementData(TddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "tdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TddSequenceType tdd = null;
                
  
        
        public FddSequenceType getFdd () {
            return this.fdd;
        }

        public boolean isFddSelected () {
            return this.fdd != null;
        }

        private void setFdd (FddSequenceType value) {
            this.fdd = value;
        }

        
        public void selectFdd (FddSequenceType value) {
            this.fdd = value;
            
                    setTdd(null);
                            
        }

        
  
        
        public TddSequenceType getTdd () {
            return this.tdd;
        }

        public boolean isTddSelected () {
            return this.tdd != null;
        }

        private void setTdd (TddSequenceType value) {
            this.tdd = value;
        }

        
        public void selectTdd (TddSequenceType value) {
            this.tdd = value;
            
                    setFdd(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(PrimaryCCPCH_Info.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            