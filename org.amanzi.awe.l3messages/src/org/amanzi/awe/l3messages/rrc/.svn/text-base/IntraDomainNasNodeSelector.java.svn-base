
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "IntraDomainNasNodeSelector", isSet = false )
    public class IntraDomainNasNodeSelector implements IASN1PreparedElement {
            
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "version" )
    public static class VersionChoiceType implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "release99" , isSet = false )
       public static class Release99SequenceType implements IASN1PreparedElement {
                
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "cn_Type" )
    public static class Cn_TypeChoiceType implements IASN1PreparedElement {
            
        @ASN1Element ( name = "gsm-Map-IDNNS", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Gsm_map_IDNNS gsm_Map_IDNNS = null;
                
  
        @ASN1Element ( name = "ansi-41-IDNNS", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Ansi_41_IDNNS ansi_41_IDNNS = null;
                
  
        
        public Gsm_map_IDNNS getGsm_Map_IDNNS () {
            return this.gsm_Map_IDNNS;
        }

        public boolean isGsm_Map_IDNNSSelected () {
            return this.gsm_Map_IDNNS != null;
        }

        private void setGsm_Map_IDNNS (Gsm_map_IDNNS value) {
            this.gsm_Map_IDNNS = value;
        }

        
        public void selectGsm_Map_IDNNS (Gsm_map_IDNNS value) {
            this.gsm_Map_IDNNS = value;
            
                    setGsm_Map_IDNNS(null);
                
                    setAnsi_41_IDNNS(null);
                            
        }

        
  
        
        public Ansi_41_IDNNS getAnsi_41_IDNNS () {
            return this.ansi_41_IDNNS;
        }

        public boolean isAnsi_41_IDNNSSelected () {
            return this.ansi_41_IDNNS != null;
        }

        private void setAnsi_41_IDNNS (Ansi_41_IDNNS value) {
            this.ansi_41_IDNNS = value;
        }

        
        public void selectAnsi_41_IDNNS (Ansi_41_IDNNS value) {
            this.ansi_41_IDNNS = value;
            
                    setGsm_Map_IDNNS(null);
                
                    setAnsi_41_IDNNS(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_Cn_TypeChoiceType;
        }

        private static IASN1PreparedElementData preparedData_Cn_TypeChoiceType = CoderFactory.getInstance().newPreparedElementData(Cn_TypeChoiceType.class);

    }

                
        @ASN1Element ( name = "cn_Type", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Cn_TypeChoiceType cn_Type = null;
                
  
        
        public Cn_TypeChoiceType getCn_Type () {
            return this.cn_Type;
        }

        

        public void setCn_Type (Cn_TypeChoiceType value) {
            this.cn_Type = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_Release99SequenceType;
        }

       private static IASN1PreparedElementData preparedData_Release99SequenceType = CoderFactory.getInstance().newPreparedElementData(Release99SequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "release99", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Release99SequenceType release99 = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "later" , isSet = false )
       public static class LaterSequenceType implements IASN1PreparedElement {
                @ASN1BitString( name = "" )
    
            @ASN1SizeConstraint ( max = 15L )
        
        @ASN1Element ( name = "futurecoding", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private BitString futurecoding = null;
                
  
        
        public BitString getFuturecoding () {
            return this.futurecoding;
        }

        

        public void setFuturecoding (BitString value) {
            this.futurecoding = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_LaterSequenceType;
        }

       private static IASN1PreparedElementData preparedData_LaterSequenceType = CoderFactory.getInstance().newPreparedElementData(LaterSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "later", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private LaterSequenceType later = null;
                
  
        
        public Release99SequenceType getRelease99 () {
            return this.release99;
        }

        public boolean isRelease99Selected () {
            return this.release99 != null;
        }

        private void setRelease99 (Release99SequenceType value) {
            this.release99 = value;
        }

        
        public void selectRelease99 (Release99SequenceType value) {
            this.release99 = value;
            
                    setLater(null);
                            
        }

        
  
        
        public LaterSequenceType getLater () {
            return this.later;
        }

        public boolean isLaterSelected () {
            return this.later != null;
        }

        private void setLater (LaterSequenceType value) {
            this.later = value;
        }

        
        public void selectLater (LaterSequenceType value) {
            this.later = value;
            
                    setRelease99(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_VersionChoiceType;
        }

        private static IASN1PreparedElementData preparedData_VersionChoiceType = CoderFactory.getInstance().newPreparedElementData(VersionChoiceType.class);

    }

                
        @ASN1Element ( name = "version", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private VersionChoiceType version = null;
                
  
        
        public VersionChoiceType getVersion () {
            return this.version;
        }

        

        public void setVersion (VersionChoiceType value) {
            this.version = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(IntraDomainNasNodeSelector.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            