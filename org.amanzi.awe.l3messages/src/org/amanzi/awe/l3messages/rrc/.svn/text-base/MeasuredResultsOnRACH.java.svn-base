
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "MeasuredResultsOnRACH", isSet = false )
    public class MeasuredResultsOnRACH implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "currentCell" , isSet = false )
       public static class CurrentCellSequenceType implements IASN1PreparedElement {
                
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "modeSpecificInfo" )
    public static class ModeSpecificInfoChoiceType implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "fdd" , isSet = false )
       public static class FddSequenceType implements IASN1PreparedElement {
                
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "measurementQuantity" )
    public static class MeasurementQuantityChoiceType implements IASN1PreparedElement {
            
        @ASN1Element ( name = "cpich-Ec-N0", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CPICH_Ec_N0 cpich_Ec_N0 = null;
                
  
        @ASN1Element ( name = "cpich-RSCP", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CPICH_RSCP cpich_RSCP = null;
                
  
        @ASN1Element ( name = "pathloss", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Pathloss pathloss = null;
                
  
        @ASN1Null ( name = "spare" ) 
    
        @ASN1Element ( name = "spare", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject spare = null;
                
  
        
        public CPICH_Ec_N0 getCpich_Ec_N0 () {
            return this.cpich_Ec_N0;
        }

        public boolean isCpich_Ec_N0Selected () {
            return this.cpich_Ec_N0 != null;
        }

        private void setCpich_Ec_N0 (CPICH_Ec_N0 value) {
            this.cpich_Ec_N0 = value;
        }

        
        public void selectCpich_Ec_N0 (CPICH_Ec_N0 value) {
            this.cpich_Ec_N0 = value;
            
                    setCpich_Ec_N0(null);
                
                    setCpich_RSCP(null);
                
                    setPathloss(null);
                
                    setSpare(null);
                            
        }

        
  
        
        public CPICH_RSCP getCpich_RSCP () {
            return this.cpich_RSCP;
        }

        public boolean isCpich_RSCPSelected () {
            return this.cpich_RSCP != null;
        }

        private void setCpich_RSCP (CPICH_RSCP value) {
            this.cpich_RSCP = value;
        }

        
        public void selectCpich_RSCP (CPICH_RSCP value) {
            this.cpich_RSCP = value;
            
                    setCpich_Ec_N0(null);
                
                    setCpich_RSCP(null);
                
                    setPathloss(null);
                
                    setSpare(null);
                            
        }

        
  
        
        public Pathloss getPathloss () {
            return this.pathloss;
        }

        public boolean isPathlossSelected () {
            return this.pathloss != null;
        }

        private void setPathloss (Pathloss value) {
            this.pathloss = value;
        }

        
        public void selectPathloss (Pathloss value) {
            this.pathloss = value;
            
                    setCpich_Ec_N0(null);
                
                    setCpich_RSCP(null);
                
                    setSpare(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getSpare () {
            return this.spare;
        }

        public boolean isSpareSelected () {
            return this.spare != null;
        }

        private void setSpare (org.bn.types.NullObject value) {
            this.spare = value;
        }

        
        public void selectSpare () {
            selectSpare (new org.bn.types.NullObject());
	}
	
        public void selectSpare (org.bn.types.NullObject value) {
            this.spare = value;
            
                    setCpich_Ec_N0(null);
                
                    setCpich_RSCP(null);
                
                    setPathloss(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_MeasurementQuantityChoiceType;
        }

        private static IASN1PreparedElementData preparedData_MeasurementQuantityChoiceType = CoderFactory.getInstance().newPreparedElementData(MeasurementQuantityChoiceType.class);

    }

                
        @ASN1Element ( name = "measurementQuantity", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementQuantityChoiceType measurementQuantity = null;
                
  
        
        public MeasurementQuantityChoiceType getMeasurementQuantity () {
            return this.measurementQuantity;
        }

        

        public void setMeasurementQuantity (MeasurementQuantityChoiceType value) {
            this.measurementQuantity = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_FddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_FddSequenceType = CoderFactory.getInstance().newPreparedElementData(FddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "fdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private FddSequenceType fdd = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "tdd" , isSet = false )
       public static class TddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "timeslotISCP", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private TimeslotISCP_List timeslotISCP = null;
                
  
        @ASN1Element ( name = "primaryCCPCH-RSCP", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private PrimaryCCPCH_RSCP primaryCCPCH_RSCP = null;
                
  
        
        public TimeslotISCP_List getTimeslotISCP () {
            return this.timeslotISCP;
        }

        
        public boolean isTimeslotISCPPresent () {
            return this.timeslotISCP != null;
        }
        

        public void setTimeslotISCP (TimeslotISCP_List value) {
            this.timeslotISCP = value;
        }
        
  
        
        public PrimaryCCPCH_RSCP getPrimaryCCPCH_RSCP () {
            return this.primaryCCPCH_RSCP;
        }

        
        public boolean isPrimaryCCPCH_RSCPPresent () {
            return this.primaryCCPCH_RSCP != null;
        }
        

        public void setPrimaryCCPCH_RSCP (PrimaryCCPCH_RSCP value) {
            this.primaryCCPCH_RSCP = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TddSequenceType = CoderFactory.getInstance().newPreparedElementData(TddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "tdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TddSequenceType tdd = null;
                
  
        
        public FddSequenceType getFdd () {
            return this.fdd;
        }

        public boolean isFddSelected () {
            return this.fdd != null;
        }

        private void setFdd (FddSequenceType value) {
            this.fdd = value;
        }

        
        public void selectFdd (FddSequenceType value) {
            this.fdd = value;
            
                    setTdd(null);
                            
        }

        
  
        
        public TddSequenceType getTdd () {
            return this.tdd;
        }

        public boolean isTddSelected () {
            return this.tdd != null;
        }

        private void setTdd (TddSequenceType value) {
            this.tdd = value;
        }

        
        public void selectTdd (TddSequenceType value) {
            this.tdd = value;
            
                    setFdd(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ModeSpecificInfoChoiceType;
        }

        private static IASN1PreparedElementData preparedData_ModeSpecificInfoChoiceType = CoderFactory.getInstance().newPreparedElementData(ModeSpecificInfoChoiceType.class);

    }

                
        @ASN1Element ( name = "modeSpecificInfo", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ModeSpecificInfoChoiceType modeSpecificInfo = null;
                
  
        
        public ModeSpecificInfoChoiceType getModeSpecificInfo () {
            return this.modeSpecificInfo;
        }

        

        public void setModeSpecificInfo (ModeSpecificInfoChoiceType value) {
            this.modeSpecificInfo = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_CurrentCellSequenceType;
        }

       private static IASN1PreparedElementData preparedData_CurrentCellSequenceType = CoderFactory.getInstance().newPreparedElementData(CurrentCellSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "currentCell", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CurrentCellSequenceType currentCell = null;
                
  
        @ASN1Element ( name = "monitoredCells", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private MonitoredCellRACH_List monitoredCells = null;
                
  
        
        public CurrentCellSequenceType getCurrentCell () {
            return this.currentCell;
        }

        

        public void setCurrentCell (CurrentCellSequenceType value) {
            this.currentCell = value;
        }
        
  
        
        public MonitoredCellRACH_List getMonitoredCells () {
            return this.monitoredCells;
        }

        
        public boolean isMonitoredCellsPresent () {
            return this.monitoredCells != null;
        }
        

        public void setMonitoredCells (MonitoredCellRACH_List value) {
            this.monitoredCells = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(MeasuredResultsOnRACH.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            