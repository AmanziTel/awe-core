
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1Choice;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1Integer;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.annotations.constraints.ASN1ValueRangeConstraint;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "UE_Positioning_PositionEstimateInfo", isSet = false )
    public class UE_Positioning_PositionEstimateInfo implements IASN1PreparedElement {
            
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "referenceTime" )
    public static class ReferenceTimeChoiceType implements IASN1PreparedElement {
            
        @ASN1Element ( name = "utran-GPSReferenceTimeResult", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private UTRAN_GPSReferenceTimeResult utran_GPSReferenceTimeResult = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 604799999L 
		
	   )
	   
        @ASN1Element ( name = "gps-ReferenceTimeOnly", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer gps_ReferenceTimeOnly = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "cell_Timing" , isSet = false )
       public static class Cell_TimingSequenceType implements IASN1PreparedElement {
                @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 4095L 
		
	   )
	   
        @ASN1Element ( name = "sfn", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer sfn = null;
                
  
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "modeSpecificInfo" )
    public static class ModeSpecificInfoChoiceType implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "fdd" , isSet = false )
       public static class FddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "primaryCPICH-Info", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private PrimaryCPICH_Info primaryCPICH_Info = null;
                
  
        
        public PrimaryCPICH_Info getPrimaryCPICH_Info () {
            return this.primaryCPICH_Info;
        }

        

        public void setPrimaryCPICH_Info (PrimaryCPICH_Info value) {
            this.primaryCPICH_Info = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_FddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_FddSequenceType = CoderFactory.getInstance().newPreparedElementData(FddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "fdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private FddSequenceType fdd = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "tdd" , isSet = false )
       public static class TddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "cellAndChannelIdentity", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CellAndChannelIdentity cellAndChannelIdentity = null;
                
  
        
        public CellAndChannelIdentity getCellAndChannelIdentity () {
            return this.cellAndChannelIdentity;
        }

        

        public void setCellAndChannelIdentity (CellAndChannelIdentity value) {
            this.cellAndChannelIdentity = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TddSequenceType = CoderFactory.getInstance().newPreparedElementData(TddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "tdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TddSequenceType tdd = null;
                
  
        
        public FddSequenceType getFdd () {
            return this.fdd;
        }

        public boolean isFddSelected () {
            return this.fdd != null;
        }

        private void setFdd (FddSequenceType value) {
            this.fdd = value;
        }

        
        public void selectFdd (FddSequenceType value) {
            this.fdd = value;
            
                    setTdd(null);
                            
        }

        
  
        
        public TddSequenceType getTdd () {
            return this.tdd;
        }

        public boolean isTddSelected () {
            return this.tdd != null;
        }

        private void setTdd (TddSequenceType value) {
            this.tdd = value;
        }

        
        public void selectTdd (TddSequenceType value) {
            this.tdd = value;
            
                    setFdd(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ModeSpecificInfoChoiceType;
        }

        private static IASN1PreparedElementData preparedData_ModeSpecificInfoChoiceType = CoderFactory.getInstance().newPreparedElementData(ModeSpecificInfoChoiceType.class);

    }

                
        @ASN1Element ( name = "modeSpecificInfo", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ModeSpecificInfoChoiceType modeSpecificInfo = null;
                
  
        
        public Integer getSfn () {
            return this.sfn;
        }

        

        public void setSfn (Integer value) {
            this.sfn = value;
        }
        
  
        
        public ModeSpecificInfoChoiceType getModeSpecificInfo () {
            return this.modeSpecificInfo;
        }

        

        public void setModeSpecificInfo (ModeSpecificInfoChoiceType value) {
            this.modeSpecificInfo = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_Cell_TimingSequenceType;
        }

       private static IASN1PreparedElementData preparedData_Cell_TimingSequenceType = CoderFactory.getInstance().newPreparedElementData(Cell_TimingSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "cell_Timing", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Cell_TimingSequenceType cell_Timing = null;
                
  
        
        public UTRAN_GPSReferenceTimeResult getUtran_GPSReferenceTimeResult () {
            return this.utran_GPSReferenceTimeResult;
        }

        public boolean isUtran_GPSReferenceTimeResultSelected () {
            return this.utran_GPSReferenceTimeResult != null;
        }

        private void setUtran_GPSReferenceTimeResult (UTRAN_GPSReferenceTimeResult value) {
            this.utran_GPSReferenceTimeResult = value;
        }

        
        public void selectUtran_GPSReferenceTimeResult (UTRAN_GPSReferenceTimeResult value) {
            this.utran_GPSReferenceTimeResult = value;
            
                    setUtran_GPSReferenceTimeResult(null);
                
                    setGps_ReferenceTimeOnly(null);
                
                    setCell_Timing(null);
                            
        }

        
  
        
        public Integer getGps_ReferenceTimeOnly () {
            return this.gps_ReferenceTimeOnly;
        }

        public boolean isGps_ReferenceTimeOnlySelected () {
            return this.gps_ReferenceTimeOnly != null;
        }

        private void setGps_ReferenceTimeOnly (Integer value) {
            this.gps_ReferenceTimeOnly = value;
        }

        
        public void selectGps_ReferenceTimeOnly (Integer value) {
            this.gps_ReferenceTimeOnly = value;
            
                    setUtran_GPSReferenceTimeResult(null);
                
                    setGps_ReferenceTimeOnly(null);
                
                    setCell_Timing(null);
                            
        }

        
  
        
        public Cell_TimingSequenceType getCell_Timing () {
            return this.cell_Timing;
        }

        public boolean isCell_TimingSelected () {
            return this.cell_Timing != null;
        }

        private void setCell_Timing (Cell_TimingSequenceType value) {
            this.cell_Timing = value;
        }

        
        public void selectCell_Timing (Cell_TimingSequenceType value) {
            this.cell_Timing = value;
            
                    setUtran_GPSReferenceTimeResult(null);
                
                    setGps_ReferenceTimeOnly(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ReferenceTimeChoiceType;
        }

        private static IASN1PreparedElementData preparedData_ReferenceTimeChoiceType = CoderFactory.getInstance().newPreparedElementData(ReferenceTimeChoiceType.class);

    }

                
        @ASN1Element ( name = "referenceTime", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ReferenceTimeChoiceType referenceTime = null;
                
  
        @ASN1Element ( name = "positionEstimate", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private PositionEstimate positionEstimate = null;
                
  
        
        public ReferenceTimeChoiceType getReferenceTime () {
            return this.referenceTime;
        }

        

        public void setReferenceTime (ReferenceTimeChoiceType value) {
            this.referenceTime = value;
        }
        
  
        
        public PositionEstimate getPositionEstimate () {
            return this.positionEstimate;
        }

        

        public void setPositionEstimate (PositionEstimate value) {
            this.positionEstimate = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(UE_Positioning_PositionEstimateInfo.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            