
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "TrafficVolumeMeasuredResults", isSet = false )
    public class TrafficVolumeMeasuredResults implements IASN1PreparedElement {
            
        @ASN1Element ( name = "rb-Identity", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private RB_Identity rb_Identity = null;
                
  
        @ASN1Element ( name = "rlc-BuffersPayload", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private RLC_BuffersPayload rlc_BuffersPayload = null;
                
  
        @ASN1Element ( name = "averageRLC-BufferPayload", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private AverageRLC_BufferPayload averageRLC_BufferPayload = null;
                
  
        @ASN1Element ( name = "varianceOfRLC-BufferPayload", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private VarianceOfRLC_BufferPayload varianceOfRLC_BufferPayload = null;
                
  
        
        public RB_Identity getRb_Identity () {
            return this.rb_Identity;
        }

        

        public void setRb_Identity (RB_Identity value) {
            this.rb_Identity = value;
        }
        
  
        
        public RLC_BuffersPayload getRlc_BuffersPayload () {
            return this.rlc_BuffersPayload;
        }

        
        public boolean isRlc_BuffersPayloadPresent () {
            return this.rlc_BuffersPayload != null;
        }
        

        public void setRlc_BuffersPayload (RLC_BuffersPayload value) {
            this.rlc_BuffersPayload = value;
        }
        
  
        
        public AverageRLC_BufferPayload getAverageRLC_BufferPayload () {
            return this.averageRLC_BufferPayload;
        }

        
        public boolean isAverageRLC_BufferPayloadPresent () {
            return this.averageRLC_BufferPayload != null;
        }
        

        public void setAverageRLC_BufferPayload (AverageRLC_BufferPayload value) {
            this.averageRLC_BufferPayload = value;
        }
        
  
        
        public VarianceOfRLC_BufferPayload getVarianceOfRLC_BufferPayload () {
            return this.varianceOfRLC_BufferPayload;
        }

        
        public boolean isVarianceOfRLC_BufferPayloadPresent () {
            return this.varianceOfRLC_BufferPayload != null;
        }
        

        public void setVarianceOfRLC_BufferPayload (VarianceOfRLC_BufferPayload value) {
            this.varianceOfRLC_BufferPayload = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(TrafficVolumeMeasuredResults.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            