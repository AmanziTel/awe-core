
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1Choice;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1Null;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "QualityMeasuredResults", isSet = false )
    public class QualityMeasuredResults implements IASN1PreparedElement {
            
        @ASN1Element ( name = "blerMeasurementResultsList", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private BLER_MeasurementResultsList blerMeasurementResultsList = null;
                
  
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "modeSpecificInfo" )
    public static class ModeSpecificInfoChoiceType implements IASN1PreparedElement {
            
        @ASN1Null ( name = "fdd" ) 
    
        @ASN1Element ( name = "fdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject fdd = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "tdd" , isSet = false )
       public static class TddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "sir-MeasurementResults", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private SIR_MeasurementList sir_MeasurementResults = null;
                
  
        
        public SIR_MeasurementList getSir_MeasurementResults () {
            return this.sir_MeasurementResults;
        }

        
        public boolean isSir_MeasurementResultsPresent () {
            return this.sir_MeasurementResults != null;
        }
        

        public void setSir_MeasurementResults (SIR_MeasurementList value) {
            this.sir_MeasurementResults = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TddSequenceType = CoderFactory.getInstance().newPreparedElementData(TddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "tdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TddSequenceType tdd = null;
                
  
        
        public org.bn.types.NullObject getFdd () {
            return this.fdd;
        }

        public boolean isFddSelected () {
            return this.fdd != null;
        }

        private void setFdd (org.bn.types.NullObject value) {
            this.fdd = value;
        }

        
        public void selectFdd () {
            selectFdd (new org.bn.types.NullObject());
	}
	
        public void selectFdd (org.bn.types.NullObject value) {
            this.fdd = value;
            
                    setTdd(null);
                            
        }

        
  
        
        public TddSequenceType getTdd () {
            return this.tdd;
        }

        public boolean isTddSelected () {
            return this.tdd != null;
        }

        private void setTdd (TddSequenceType value) {
            this.tdd = value;
        }

        
        public void selectTdd (TddSequenceType value) {
            this.tdd = value;
            
                    setFdd(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ModeSpecificInfoChoiceType;
        }

        private static IASN1PreparedElementData preparedData_ModeSpecificInfoChoiceType = CoderFactory.getInstance().newPreparedElementData(ModeSpecificInfoChoiceType.class);

    }

                
        @ASN1Element ( name = "modeSpecificInfo", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ModeSpecificInfoChoiceType modeSpecificInfo = null;
                
  
        
        public BLER_MeasurementResultsList getBlerMeasurementResultsList () {
            return this.blerMeasurementResultsList;
        }

        
        public boolean isBlerMeasurementResultsListPresent () {
            return this.blerMeasurementResultsList != null;
        }
        

        public void setBlerMeasurementResultsList (BLER_MeasurementResultsList value) {
            this.blerMeasurementResultsList = value;
        }
        
  
        
        public ModeSpecificInfoChoiceType getModeSpecificInfo () {
            return this.modeSpecificInfo;
        }

        

        public void setModeSpecificInfo (ModeSpecificInfoChoiceType value) {
            this.modeSpecificInfo = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(QualityMeasuredResults.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            