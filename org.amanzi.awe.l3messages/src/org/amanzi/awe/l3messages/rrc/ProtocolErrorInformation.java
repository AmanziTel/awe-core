
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1Choice;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1Null;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "ProtocolErrorInformation", isSet = false )
    public class ProtocolErrorInformation implements IASN1PreparedElement {
            
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "diagnosticsType" )
    public static class DiagnosticsTypeChoiceType implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "type1" , isSet = false )
       public static class Type1SequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "protocolErrorCause", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ProtocolErrorCause protocolErrorCause = null;
                
  
        
        public ProtocolErrorCause getProtocolErrorCause () {
            return this.protocolErrorCause;
        }

        

        public void setProtocolErrorCause (ProtocolErrorCause value) {
            this.protocolErrorCause = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_Type1SequenceType;
        }

       private static IASN1PreparedElementData preparedData_Type1SequenceType = CoderFactory.getInstance().newPreparedElementData(Type1SequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "type1", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Type1SequenceType type1 = null;
                
  
        @ASN1Null ( name = "spare" ) 
    
        @ASN1Element ( name = "spare", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject spare = null;
                
  
        
        public Type1SequenceType getType1 () {
            return this.type1;
        }

        public boolean isType1Selected () {
            return this.type1 != null;
        }

        private void setType1 (Type1SequenceType value) {
            this.type1 = value;
        }

        
        public void selectType1 (Type1SequenceType value) {
            this.type1 = value;
            
                    setSpare(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getSpare () {
            return this.spare;
        }

        public boolean isSpareSelected () {
            return this.spare != null;
        }

        private void setSpare (org.bn.types.NullObject value) {
            this.spare = value;
        }

        
        public void selectSpare () {
            selectSpare (new org.bn.types.NullObject());
	}
	
        public void selectSpare (org.bn.types.NullObject value) {
            this.spare = value;
            
                    setType1(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_DiagnosticsTypeChoiceType;
        }

        private static IASN1PreparedElementData preparedData_DiagnosticsTypeChoiceType = CoderFactory.getInstance().newPreparedElementData(DiagnosticsTypeChoiceType.class);

    }

                
        @ASN1Element ( name = "diagnosticsType", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private DiagnosticsTypeChoiceType diagnosticsType = null;
                
  
        
        public DiagnosticsTypeChoiceType getDiagnosticsType () {
            return this.diagnosticsType;
        }

        

        public void setDiagnosticsType (DiagnosticsTypeChoiceType value) {
            this.diagnosticsType = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ProtocolErrorInformation.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            