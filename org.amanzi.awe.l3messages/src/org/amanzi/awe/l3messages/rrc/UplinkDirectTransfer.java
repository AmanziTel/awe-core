
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1BitString;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;
import org.bn.types.BitString;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "UplinkDirectTransfer", isSet = false )
    public class UplinkDirectTransfer implements IASN1PreparedElement {
            
        @ASN1Element ( name = "cn-DomainIdentity", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CN_DomainIdentity cn_DomainIdentity = null;
                
  
        @ASN1Element ( name = "nas-Message", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private NAS_Message nas_Message = null;
                
  
        @ASN1Element ( name = "measuredResultsOnRACH", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasuredResultsOnRACH measuredResultsOnRACH = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "laterNonCriticalExtensions" , isSet = false )
       public static class LaterNonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                @ASN1BitString( name = "" )
    
        @ASN1Element ( name = "uplinkDirectTransfer-r3-add-ext", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private BitString uplinkDirectTransfer_r3_add_ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "v690NonCriticalExtensions" , isSet = false )
       public static class V690NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "uplinkDirectTransfer-v690ext", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private UplinkDirectTransfer_v690ext_IEs uplinkDirectTransfer_v690ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "nonCriticalExtensions" , isSet = false )
       public static class NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "nonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonCriticalExtensionsSequenceType nonCriticalExtensions = null;
                
  
        
        public UplinkDirectTransfer_v690ext_IEs getUplinkDirectTransfer_v690ext () {
            return this.uplinkDirectTransfer_v690ext;
        }

        

        public void setUplinkDirectTransfer_v690ext (UplinkDirectTransfer_v690ext_IEs value) {
            this.uplinkDirectTransfer_v690ext = value;
        }
        
  
        
        public NonCriticalExtensionsSequenceType getNonCriticalExtensions () {
            return this.nonCriticalExtensions;
        }

        
        public boolean isNonCriticalExtensionsPresent () {
            return this.nonCriticalExtensions != null;
        }
        

        public void setNonCriticalExtensions (NonCriticalExtensionsSequenceType value) {
            this.nonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_V690NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_V690NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(V690NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "v690NonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private V690NonCriticalExtensionsSequenceType v690NonCriticalExtensions = null;
                
  
        
        public BitString getUplinkDirectTransfer_r3_add_ext () {
            return this.uplinkDirectTransfer_r3_add_ext;
        }

        
        public boolean isUplinkDirectTransfer_r3_add_extPresent () {
            return this.uplinkDirectTransfer_r3_add_ext != null;
        }
        

        public void setUplinkDirectTransfer_r3_add_ext (BitString value) {
            this.uplinkDirectTransfer_r3_add_ext = value;
        }
        
  
        
        public V690NonCriticalExtensionsSequenceType getV690NonCriticalExtensions () {
            return this.v690NonCriticalExtensions;
        }

        
        public boolean isV690NonCriticalExtensionsPresent () {
            return this.v690NonCriticalExtensions != null;
        }
        

        public void setV690NonCriticalExtensions (V690NonCriticalExtensionsSequenceType value) {
            this.v690NonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_LaterNonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_LaterNonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(LaterNonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "laterNonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private LaterNonCriticalExtensionsSequenceType laterNonCriticalExtensions = null;
                
  
        
        public CN_DomainIdentity getCn_DomainIdentity () {
            return this.cn_DomainIdentity;
        }

        

        public void setCn_DomainIdentity (CN_DomainIdentity value) {
            this.cn_DomainIdentity = value;
        }
        
  
        
        public NAS_Message getNas_Message () {
            return this.nas_Message;
        }

        

        public void setNas_Message (NAS_Message value) {
            this.nas_Message = value;
        }
        
  
        
        public MeasuredResultsOnRACH getMeasuredResultsOnRACH () {
            return this.measuredResultsOnRACH;
        }

        
        public boolean isMeasuredResultsOnRACHPresent () {
            return this.measuredResultsOnRACH != null;
        }
        

        public void setMeasuredResultsOnRACH (MeasuredResultsOnRACH value) {
            this.measuredResultsOnRACH = value;
        }
        
  
        
        public LaterNonCriticalExtensionsSequenceType getLaterNonCriticalExtensions () {
            return this.laterNonCriticalExtensions;
        }

        
        public boolean isLaterNonCriticalExtensionsPresent () {
            return this.laterNonCriticalExtensions != null;
        }
        

        public void setLaterNonCriticalExtensions (LaterNonCriticalExtensionsSequenceType value) {
            this.laterNonCriticalExtensions = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(UplinkDirectTransfer.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            