
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "GPS_MeasurementParam", isSet = false )
    public class GPS_MeasurementParam implements IASN1PreparedElement {
            @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 63L 
		
	   )
	   
        @ASN1Element ( name = "satelliteID", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer satelliteID = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 63L 
		
	   )
	   
        @ASN1Element ( name = "c-N0", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer c_N0 = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = -32768L, 
		
		max = 32768L 
		
	   )
	   
        @ASN1Element ( name = "doppler", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer doppler = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 1022L 
		
	   )
	   
        @ASN1Element ( name = "wholeGPS-Chips", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer wholeGPS_Chips = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 1023L 
		
	   )
	   
        @ASN1Element ( name = "fractionalGPS-Chips", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer fractionalGPS_Chips = null;
                
  
        @ASN1Element ( name = "multipathIndicator", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MultipathIndicator multipathIndicator = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 63L 
		
	   )
	   
        @ASN1Element ( name = "pseudorangeRMS-Error", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer pseudorangeRMS_Error = null;
                
  
        
        public Integer getSatelliteID () {
            return this.satelliteID;
        }

        

        public void setSatelliteID (Integer value) {
            this.satelliteID = value;
        }
        
  
        
        public Integer getC_N0 () {
            return this.c_N0;
        }

        

        public void setC_N0 (Integer value) {
            this.c_N0 = value;
        }
        
  
        
        public Integer getDoppler () {
            return this.doppler;
        }

        

        public void setDoppler (Integer value) {
            this.doppler = value;
        }
        
  
        
        public Integer getWholeGPS_Chips () {
            return this.wholeGPS_Chips;
        }

        

        public void setWholeGPS_Chips (Integer value) {
            this.wholeGPS_Chips = value;
        }
        
  
        
        public Integer getFractionalGPS_Chips () {
            return this.fractionalGPS_Chips;
        }

        

        public void setFractionalGPS_Chips (Integer value) {
            this.fractionalGPS_Chips = value;
        }
        
  
        
        public MultipathIndicator getMultipathIndicator () {
            return this.multipathIndicator;
        }

        

        public void setMultipathIndicator (MultipathIndicator value) {
            this.multipathIndicator = value;
        }
        
  
        
        public Integer getPseudorangeRMS_Error () {
            return this.pseudorangeRMS_Error;
        }

        

        public void setPseudorangeRMS_Error (Integer value) {
            this.pseudorangeRMS_Error = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(GPS_MeasurementParam.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            