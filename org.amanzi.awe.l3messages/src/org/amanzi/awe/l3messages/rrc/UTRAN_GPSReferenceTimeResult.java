
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "UTRAN_GPSReferenceTimeResult", isSet = false )
    public class UTRAN_GPSReferenceTimeResult implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "ue_GPSTimingOfCell" , isSet = false )
       public static class Ue_GPSTimingOfCellSequenceType implements IASN1PreparedElement {
                @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 16383L 
		
	   )
	   
        @ASN1Element ( name = "ms-part", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer ms_part = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 4294967295L 
		
	   )
	   
        @ASN1Element ( name = "ls-part", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Long ls_part = null;
                
  
        
        public Integer getMs_part () {
            return this.ms_part;
        }

        

        public void setMs_part (Integer value) {
            this.ms_part = value;
        }
        
  
        
        public Long getLs_part () {
            return this.ls_part;
        }

        

        public void setLs_part (Long value) {
            this.ls_part = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_Ue_GPSTimingOfCellSequenceType;
        }

       private static IASN1PreparedElementData preparedData_Ue_GPSTimingOfCellSequenceType = CoderFactory.getInstance().newPreparedElementData(Ue_GPSTimingOfCellSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "ue_GPSTimingOfCell", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Ue_GPSTimingOfCellSequenceType ue_GPSTimingOfCell = null;
                
  
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "modeSpecificInfo" )
    public static class ModeSpecificInfoChoiceType implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "fdd" , isSet = false )
       public static class FddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "referenceIdentity", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private PrimaryCPICH_Info referenceIdentity = null;
                
  
        
        public PrimaryCPICH_Info getReferenceIdentity () {
            return this.referenceIdentity;
        }

        

        public void setReferenceIdentity (PrimaryCPICH_Info value) {
            this.referenceIdentity = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_FddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_FddSequenceType = CoderFactory.getInstance().newPreparedElementData(FddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "fdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private FddSequenceType fdd = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "tdd" , isSet = false )
       public static class TddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "referenceIdentity", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CellParametersID referenceIdentity = null;
                
  
        
        public CellParametersID getReferenceIdentity () {
            return this.referenceIdentity;
        }

        

        public void setReferenceIdentity (CellParametersID value) {
            this.referenceIdentity = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TddSequenceType = CoderFactory.getInstance().newPreparedElementData(TddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "tdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TddSequenceType tdd = null;
                
  
        
        public FddSequenceType getFdd () {
            return this.fdd;
        }

        public boolean isFddSelected () {
            return this.fdd != null;
        }

        private void setFdd (FddSequenceType value) {
            this.fdd = value;
        }

        
        public void selectFdd (FddSequenceType value) {
            this.fdd = value;
            
                    setTdd(null);
                            
        }

        
  
        
        public TddSequenceType getTdd () {
            return this.tdd;
        }

        public boolean isTddSelected () {
            return this.tdd != null;
        }

        private void setTdd (TddSequenceType value) {
            this.tdd = value;
        }

        
        public void selectTdd (TddSequenceType value) {
            this.tdd = value;
            
                    setFdd(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ModeSpecificInfoChoiceType;
        }

        private static IASN1PreparedElementData preparedData_ModeSpecificInfoChoiceType = CoderFactory.getInstance().newPreparedElementData(ModeSpecificInfoChoiceType.class);

    }

                
        @ASN1Element ( name = "modeSpecificInfo", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ModeSpecificInfoChoiceType modeSpecificInfo = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 4095L 
		
	   )
	   
        @ASN1Element ( name = "sfn", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Integer sfn = null;
                
  
        
        public Ue_GPSTimingOfCellSequenceType getUe_GPSTimingOfCell () {
            return this.ue_GPSTimingOfCell;
        }

        

        public void setUe_GPSTimingOfCell (Ue_GPSTimingOfCellSequenceType value) {
            this.ue_GPSTimingOfCell = value;
        }
        
  
        
        public ModeSpecificInfoChoiceType getModeSpecificInfo () {
            return this.modeSpecificInfo;
        }

        

        public void setModeSpecificInfo (ModeSpecificInfoChoiceType value) {
            this.modeSpecificInfo = value;
        }
        
  
        
        public Integer getSfn () {
            return this.sfn;
        }

        

        public void setSfn (Integer value) {
            this.sfn = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(UTRAN_GPSReferenceTimeResult.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            