
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "UE_InternalMeasuredResults", isSet = false )
    public class UE_InternalMeasuredResults implements IASN1PreparedElement {
            
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "modeSpecificInfo" )
    public static class ModeSpecificInfoChoiceType implements IASN1PreparedElement {
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "fdd" , isSet = false )
       public static class FddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "ue-TransmittedPowerFDD", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private UE_TransmittedPower ue_TransmittedPowerFDD = null;
                
  
        @ASN1Element ( name = "ue-RX-TX-ReportEntryList", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private UE_RX_TX_ReportEntryList ue_RX_TX_ReportEntryList = null;
                
  
        
        public UE_TransmittedPower getUe_TransmittedPowerFDD () {
            return this.ue_TransmittedPowerFDD;
        }

        
        public boolean isUe_TransmittedPowerFDDPresent () {
            return this.ue_TransmittedPowerFDD != null;
        }
        

        public void setUe_TransmittedPowerFDD (UE_TransmittedPower value) {
            this.ue_TransmittedPowerFDD = value;
        }
        
  
        
        public UE_RX_TX_ReportEntryList getUe_RX_TX_ReportEntryList () {
            return this.ue_RX_TX_ReportEntryList;
        }

        
        public boolean isUe_RX_TX_ReportEntryListPresent () {
            return this.ue_RX_TX_ReportEntryList != null;
        }
        

        public void setUe_RX_TX_ReportEntryList (UE_RX_TX_ReportEntryList value) {
            this.ue_RX_TX_ReportEntryList = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_FddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_FddSequenceType = CoderFactory.getInstance().newPreparedElementData(FddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "fdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private FddSequenceType fdd = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "tdd" , isSet = false )
       public static class TddSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "ue-TransmittedPowerTDD-List", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private UE_TransmittedPowerTDD_List ue_TransmittedPowerTDD_List = null;
                
  
        @ASN1Element ( name = "appliedTA", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private UL_TimingAdvance appliedTA = null;
                
  
        
        public UE_TransmittedPowerTDD_List getUe_TransmittedPowerTDD_List () {
            return this.ue_TransmittedPowerTDD_List;
        }

        
        public boolean isUe_TransmittedPowerTDD_ListPresent () {
            return this.ue_TransmittedPowerTDD_List != null;
        }
        

        public void setUe_TransmittedPowerTDD_List (UE_TransmittedPowerTDD_List value) {
            this.ue_TransmittedPowerTDD_List = value;
        }
        
  
        
        public UL_TimingAdvance getAppliedTA () {
            return this.appliedTA;
        }

        
        public boolean isAppliedTAPresent () {
            return this.appliedTA != null;
        }
        

        public void setAppliedTA (UL_TimingAdvance value) {
            this.appliedTA = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TddSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TddSequenceType = CoderFactory.getInstance().newPreparedElementData(TddSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "tdd", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TddSequenceType tdd = null;
                
  
        
        public FddSequenceType getFdd () {
            return this.fdd;
        }

        public boolean isFddSelected () {
            return this.fdd != null;
        }

        private void setFdd (FddSequenceType value) {
            this.fdd = value;
        }

        
        public void selectFdd (FddSequenceType value) {
            this.fdd = value;
            
                    setTdd(null);
                            
        }

        
  
        
        public TddSequenceType getTdd () {
            return this.tdd;
        }

        public boolean isTddSelected () {
            return this.tdd != null;
        }

        private void setTdd (TddSequenceType value) {
            this.tdd = value;
        }

        
        public void selectTdd (TddSequenceType value) {
            this.tdd = value;
            
                    setFdd(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ModeSpecificInfoChoiceType;
        }

        private static IASN1PreparedElementData preparedData_ModeSpecificInfoChoiceType = CoderFactory.getInstance().newPreparedElementData(ModeSpecificInfoChoiceType.class);

    }

                
        @ASN1Element ( name = "modeSpecificInfo", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ModeSpecificInfoChoiceType modeSpecificInfo = null;
                
  
        
        public ModeSpecificInfoChoiceType getModeSpecificInfo () {
            return this.modeSpecificInfo;
        }

        

        public void setModeSpecificInfo (ModeSpecificInfoChoiceType value) {
            this.modeSpecificInfo = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(UE_InternalMeasuredResults.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            