
package org.amanzi.awe.l3messages.rrc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.CoderFactory;
import org.bn.annotations.ASN1BitString;
import org.bn.annotations.ASN1Element;
import org.bn.annotations.ASN1PreparedElement;
import org.bn.annotations.ASN1Sequence;
import org.bn.coders.IASN1PreparedElement;
import org.bn.coders.IASN1PreparedElementData;
import org.bn.types.BitString;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "MeasurementControlFailure", isSet = false )
    public class MeasurementControlFailure implements IASN1PreparedElement {
            
        @ASN1Element ( name = "rrc-TransactionIdentifier", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private RRC_TransactionIdentifier rrc_TransactionIdentifier = null;
                
  
        @ASN1Element ( name = "failureCause", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private FailureCauseWithProtErr failureCause = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "laterNonCriticalExtensions" , isSet = false )
       public static class LaterNonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                @ASN1BitString( name = "" )
    
        @ASN1Element ( name = "measurementControlFailure-r3-add-ext", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private BitString measurementControlFailure_r3_add_ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "v590NonCriticalExtensions" , isSet = false )
       public static class V590NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "measurementControlFailure-v590ext", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private MeasurementControlFailure_v590ext_IEs measurementControlFailure_v590ext = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "nonCriticalExtensions" , isSet = false )
       public static class NonCriticalExtensionsSequenceType implements IASN1PreparedElement {
                
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "nonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonCriticalExtensionsSequenceType nonCriticalExtensions = null;
                
  
        
        public MeasurementControlFailure_v590ext_IEs getMeasurementControlFailure_v590ext () {
            return this.measurementControlFailure_v590ext;
        }

        

        public void setMeasurementControlFailure_v590ext (MeasurementControlFailure_v590ext_IEs value) {
            this.measurementControlFailure_v590ext = value;
        }
        
  
        
        public NonCriticalExtensionsSequenceType getNonCriticalExtensions () {
            return this.nonCriticalExtensions;
        }

        
        public boolean isNonCriticalExtensionsPresent () {
            return this.nonCriticalExtensions != null;
        }
        

        public void setNonCriticalExtensions (NonCriticalExtensionsSequenceType value) {
            this.nonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_V590NonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_V590NonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(V590NonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "v590NonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private V590NonCriticalExtensionsSequenceType v590NonCriticalExtensions = null;
                
  
        
        public BitString getMeasurementControlFailure_r3_add_ext () {
            return this.measurementControlFailure_r3_add_ext;
        }

        
        public boolean isMeasurementControlFailure_r3_add_extPresent () {
            return this.measurementControlFailure_r3_add_ext != null;
        }
        

        public void setMeasurementControlFailure_r3_add_ext (BitString value) {
            this.measurementControlFailure_r3_add_ext = value;
        }
        
  
        
        public V590NonCriticalExtensionsSequenceType getV590NonCriticalExtensions () {
            return this.v590NonCriticalExtensions;
        }

        
        public boolean isV590NonCriticalExtensionsPresent () {
            return this.v590NonCriticalExtensions != null;
        }
        

        public void setV590NonCriticalExtensions (V590NonCriticalExtensionsSequenceType value) {
            this.v590NonCriticalExtensions = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_LaterNonCriticalExtensionsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_LaterNonCriticalExtensionsSequenceType = CoderFactory.getInstance().newPreparedElementData(LaterNonCriticalExtensionsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "laterNonCriticalExtensions", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private LaterNonCriticalExtensionsSequenceType laterNonCriticalExtensions = null;
                
  
        
        public RRC_TransactionIdentifier getRrc_TransactionIdentifier () {
            return this.rrc_TransactionIdentifier;
        }

        

        public void setRrc_TransactionIdentifier (RRC_TransactionIdentifier value) {
            this.rrc_TransactionIdentifier = value;
        }
        
  
        
        public FailureCauseWithProtErr getFailureCause () {
            return this.failureCause;
        }

        

        public void setFailureCause (FailureCauseWithProtErr value) {
            this.failureCause = value;
        }
        
  
        
        public LaterNonCriticalExtensionsSequenceType getLaterNonCriticalExtensions () {
            return this.laterNonCriticalExtensions;
        }

        
        public boolean isLaterNonCriticalExtensionsPresent () {
            return this.laterNonCriticalExtensions != null;
        }
        

        public void setLaterNonCriticalExtensions (LaterNonCriticalExtensionsSequenceType value) {
            this.laterNonCriticalExtensions = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(MeasurementControlFailure.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            