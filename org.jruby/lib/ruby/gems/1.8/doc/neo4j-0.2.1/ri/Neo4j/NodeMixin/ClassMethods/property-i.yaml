--- !ruby/object:RI::MethodDescription 
visibility: public
block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: 'Generates accessor method and sets configuration for Neo4j node properties.
    The generated accessor is a simple wrapper around the #set_property and #get_property
    methods.'
- !ruby/struct:SM::Flow::P 
  body: If a property is set to nil the property will be removed.
- !ruby/struct:SM::Flow::H 
  text: Configuration
  level: 4
- !ruby/struct:SM::Flow::P 
  body: By setting the :type configuration parameter to 'Object' makes it possible
    to marshal any ruby object.
- !ruby/struct:SM::Flow::P 
  body: 'If no type is provided the only the native Neo4j property types are allowed:'
- !ruby/object:SM::Flow::LIST 
  type: :BULLET
  contents: 
  - !ruby/struct:SM::Flow::LI 
    body: TrueClass, FalseClass
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: String
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: Fixnum
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: Float
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: Boolean
    label: '*'
- !ruby/struct:SM::Flow::H 
  text: Parameters
  level: 4
- !ruby/object:SM::Flow::LIST 
  type: :NOTE
  contents: 
  - !ruby/struct:SM::Flow::LI 
    body: a variable length arguments or a hash, see example below
    label: 'props<Array,Hash>:'
- !ruby/struct:SM::Flow::H 
  text: Example
  level: 4
- !ruby/struct:SM::Flow::VERB 
  body: "  class Baaz; end\n\n  class Foo\n    include Neo4j::NodeMixin\n    property \
    name, city # can set several properties in one go\n    property bar, :type =&gt; \
    Object # allow serialization of any ruby object\n  end\n\n  f = Foo.new\n  f.bar \
    = Baaz.new\n"
- !ruby/struct:SM::Flow::P 
  body: ":api: public"
full_name: Neo4j::NodeMixin::ClassMethods#property
params: (*props)
name: property
is_singleton: false
aliases: []

