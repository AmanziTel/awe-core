--- !ruby/object:RI::ClassDescription 
includes: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: If node class A has a relation with type 'd' to node class B
- !ruby/struct:SM::Flow::VERB 
  body: "  A.x -d-&gt; B.y  A.index d.y\n"
- !ruby/struct:SM::Flow::P 
  body: If property y on a B node changes then all its nodes in the relation 'd' will
    be reindexed. Those nodes (which will be of type node class A) will use the same
    RelationIndexer to update the index document with key field 'd.y' and values of
    property y of all nodes in the relationship 'd'
- !ruby/struct:SM::Flow::P 
  body: ":api: private"
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: properties
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: rel_type
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: index_key
- !ruby/object:RI::MethodSummary 
  name: on_property_changed
- !ruby/object:RI::MethodSummary 
  name: on_relation_created
- !ruby/object:RI::MethodSummary 
  name: on_relation_deleted
- !ruby/object:RI::MethodSummary 
  name: reindex_related_nodes
- !ruby/object:RI::MethodSummary 
  name: update_document
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
full_name: Neo4j::RelationIndexer
constants: []

superclass: Object
name: RelationIndexer
