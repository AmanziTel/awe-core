<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="net.refractions.udig.core">
<annotation>
      <appInfo>
         <meta.schema plugin="net.refractions.udig.core" id="StyleDefinition" name="StyleDefinition"/>
      </appInfo>
      <documentation>
         Styles are represented as a Memento object which contains style information as a tree of mementos each of which contains strings.  Only the renderers that render a layer know the concrete style class.  This means that only certain renderers are capable of rendering certain styles.  However as far as UDig is concerned a style is a memento.  This causes problems with the user interface because udig does not know anything about the style.  To overcome this limitation a style must be associated with an editor dialog.  The editor must extend the StyleEditor class.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <documentation>
            A style is used for rendering purposes. Renderers use style objects when rendering Layer data. A style can be any object. Extenders are expected to create the style object itself, as well as an implementation of StyleContent which is uses a factory for the style. Style objects are placed onto a Layer blackboard so they can be accessed by other entities such as Renderers and StyleConfigurators.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="style" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="style">
      <annotation>
         <documentation>
            A Style provided by a plugin author.  Styles are only useful if they can be rendered so a style that extends this extension point should also have an associated renderer that know how to use the style.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  An id that will be used to identify the style. This is the key which the style is placed under when a style is placed onto a StyleBlackboard. It is used by Renderer and StyleConfigurator to identify the style.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A human readable name that can be used as a short description of the style.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  An implemtation of StyleContent. This class is responsible for loading and saving the underlying style object from persistant storage.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="net.refractions.udig.project.StyleContent"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         0.3.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         net.refractions.udig.project.impl.render.SLDEditor
net.refractions.udig.project.impl.render.SLDStyle
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         A plugin that defines a style (Note: a single plugin could define a style and a renderer) must implement a net.refractions.udig.project.impl.render.StyleEditor and a class that implements the Style interface.  The StyleEditor interface extends eclipse&apos;s IDialogPage interface and contains an additional init() method that accepts a StyleMemento object as a parameter.    The StyleMemento contains the style information that the editor can edit.  The other method is getMemento which returns a StyleMemento object.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         &lt;p&gt;SLDStyle is the Style included with uDig.  It is essentially a adapter for Geotool&apos;s Style objects.  The StyleMemento created by SLDStyle contains two properties: a &lt;b&gt;type&lt;/b&gt; property which is set to &lt;b&gt;SLDStyle&lt;/b&gt; and a &lt;b&gt;version&lt;/b&gt; property which at the time of the UDIG version 1.0 release is set to &lt;b&gt;1.0&lt;/b&gt;.  The StyleMemento contains an SLD document formatted string in its text field.  The SLD document can be retrieved using the getTextData() method call.
SLDEditor is the default Style Editor class has been included since the 0.5 release.
&lt;p&gt;
The following the code SLDStyle uses to create its StyleMemento:
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
&lt;i&gt;//Write Style to a string in SLD format&lt;/i&gt;
SLDTransformer transformer=new SLDTransformer();&lt;br&gt;
String out=null;&lt;br&gt;
try {&lt;br&gt;
&amp;nbsp;&amp;nbsp;out = transformer.transform(this);&lt;br&gt;
} catch (TransformerException e) {&lt;br&gt;
&amp;nbsp;&amp;nbsp; // TODO Auto-generated catch block&lt;br&gt;
&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
}&lt;br&gt;
&lt;i&gt;//create and fill out StyleMemento object&lt;/i&gt;&lt;br&gt;
StyleMemento memo=new StyleMemento(&quot;SLDStyle&quot;, getName(), &quot;net.refractions.udig.project.SLDStyle&quot;);&lt;br&gt;
memo.putTextData(out);&lt;br&gt;
memo.putString(&quot;type&quot;,&quot;SLDStyle&quot;);&lt;br&gt;
memo.putString(&quot;version&quot;,&quot;1.0&quot;);&lt;br&gt;
return memo;&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Refractions Research Inc. 2004
      </documentation>
   </annotation>

</schema>
